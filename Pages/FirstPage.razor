@layout EmptyLayout
@page "/"

@using System.ComponentModel.DataAnnotations;
@using Blazored.LocalStorage
@using Chatable.DI
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles.Request;
@using Chatable.Data.Entitles.Respond
@using Chatable.Data.Entitles.Response;
@using Chatable.Data.Entitles;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Net.Http;
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json;
@using System.Web;
@using System.Net.Http.Headers

@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject AppData appData;
@inject IJSRuntime jsRuntime
@inject ILocalStorageService _iLocalStorageService;
@inject CurrentUser CurrentUser;

@code {
    Token token = new Token();
    User curUser;

    protected override async Task OnInitializedAsync()
    {
        string storedAccessToken = await _iLocalStorageService.GetItemAsync<string>("access_token");
        string storedRefreshToken = await _iLocalStorageService.GetItemAsync<string>("refresh_token");

        if (!String.IsNullOrEmpty(storedAccessToken) && !String.IsNullOrEmpty(storedRefreshToken))
        {
            token.refreshToken = storedRefreshToken;
            token.accessToken = storedAccessToken;
            // Constant.token = token;

            string serializedToken = JsonConvert.SerializeObject(token);
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Auth/RefreshToken");
            httpRequestMessage.Method = new HttpMethod("POST");
            httpRequestMessage.Content = new StringContent(serializedToken);
            httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

            var response = await _http.SendAsync(httpRequestMessage);
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var responseToken = JsonConvert.DeserializeObject<ApiResponse<Token>>(responseContent);
                if (responseToken.Data!= null)
                {
                    await _iLocalStorageService.SetItemAsync("access_token", responseToken.Data.accessToken);
                    await _iLocalStorageService.SetItemAsync("refresh_token", responseToken.Data.refreshToken);

                    token.accessToken = responseToken.Data.accessToken;
                    token.refreshToken = responseToken.Data.refreshToken;

                    CurrentUser.token = token;

                }
                curUser = new User();

                curUser = await GetCurUser();

                if (curUser != null)
                {
                    CurrentUser.currentUser = curUser;

                    if (curUser.avatarUrl== null)
                    {
                       setNullAvt(curUser.gender);
                    }

                    CurrentUser.currentUser = curUser;
                    _navigationManager.NavigateTo("/chat");

                }

                else
                {
                    _navigationManager.NavigateTo("/login");

                }
            }
            else
            {
                string resBody = await response.Content.ReadAsStringAsync();
                dynamic result = JsonConvert.DeserializeObject(resBody);
                Console.WriteLine(result.message);
                _navigationManager.NavigateTo("/login");
            }
        }
        else
        {
            _navigationManager.NavigateTo("/login");
        }
    }
    private async Task<User> GetCurUser()
    {
        User curUser = new User();
        HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
        httpRequestMessage.Method = new HttpMethod("GET");
        httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User/CurrentUser");
        httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

        try
        {
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {

                var responseContent = await response.Content.ReadAsStringAsync();
                if (responseContent != null)
                {
                    ApiResponse<User> apiResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse<User>>(responseContent);
                    curUser = apiResponse.Data;
                    return curUser;
                }
                return null;

            }
            return null;
        }
        catch (Exception e)
        {
            return null;
        }
    }
    private void setNullAvt(string gender)
    {
        if (gender == "Nữ")
        {
            curUser.avatarUrl = Constant.defaultImgFemale;

        }
        else curUser.avatarUrl = Constant.defaultImgMale;
    }
}