@page "/chat"
@page "/chat/{_id?}"
@using Chatable.Data.Components;
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles.Respond;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject Blazored.LocalStorage.ILocalStorageService _localStorageService
@inherits LayoutComponentBase
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IHttpClientFactory ClientFactory

<link rel="stylesheet" href="/css/ChatLayout.css">

<style>
	.mud-divider-fullwidth {
		flex-grow: 0;
	}
</style>

<div class="chat-layout">
	<div class="left-banner">
		<SearchField>
		</SearchField> 

		<MudDivider></MudDivider>

		<div class="list-conversations">

			@* <ChatList Loading="_loadingUsers" Chats="Chats" OnUserSelected="OnUserSelected" /> *@
			@if (_loadingUsers)
			{
				<div class="coversation-container">
					<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
					Loading...
				</div>
			}
			else
			{
				@foreach (var chat in Chats)
				{
					<div class="coversation-container @(chat.IsSelected ? "user-select" : "user-unselect")"
						 @onclick="() => OnUserSelected(chat)">
						<img class="coversation-img mr-3" src="@chat.Avatar" />
						<div class="d-flex justify-start flex-column">
							<p class="coversation-name">@chat.Name</p>
							<p class="coversation-last-message">last message</p>
						</div>
					</div>

				}
			}

		</div>
	</div>

	<MudDivider Vertical="true"/>

	<div class="right-banner">
		<ChatDetail Id="@_id" NewIncomingMessage="@_newIncomingMessage"
			OnIncomingMessageRecieved="()=> _newIncomingMessage = null" />
	</div>
</div>

@code {
	[Parameter]
	public string? _id { get; set; }

	private string value2;
	private bool _loadingUsers = false;
	private Conversation? _selectedUser = null;
	private Message? _newIncomingMessage = null;
	private HubConnection? hubConnection;

	// Khi nào run thì đổi
	// = IList.Empty<Conversation>();
	public List<Conversation> Chats = Constant.chats;
	private IList<String> states = Constant.states;

	protected override async Task OnInitializedAsync()
	{
		foreach(var chat in Chats)
		{
			chat.IsSelected = false;
		}
		await GetGroup();
	}

	//private async Task<bool>

	private async Task<IEnumerable<string>> Search2(string value)
	{
		// In real life use an asynchronous function for fetching data from an api.
		await Task.Delay(5);

		// if text is null or empty, don't return values (drop-down will not open)
		if (string.IsNullOrEmpty(value))
			return new string[0];
		// return chat room
		return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}
	
	private void OpenAddGroupDialog()
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
		DialogService.Show<Data.Components.Dialog.AddGroup>("Tạo nhóm", options);
	}

	private async Task OnUserSelected(Conversation user)
	{
		_selectedUser = user;

		var selectedChatUser = Chats.FirstOrDefault(c => c.IsSelected);
		if (selectedChatUser is not null)
		{
			selectedChatUser.IsSelected = false;
		}

		var chatUser = Chats.FirstOrDefault(c => c.Id == user.Id);
		//Truong hop Chats null, user dau tien
		if (chatUser is null)
		{
			user.IsSelected = true;
			Chats.Add(user);
		}
		else
		{
			chatUser.IsSelected = true;
		}
		_navigationManager.NavigateTo($"/chat/{user.Id}");
	}
	
	private void ConfigureConnection()
	{
		//Tạo hub connection, listen

	}

	private async Task<bool> GetGroup()
	{
		bool success;
		string erroMessage;
		List<Group> groups = new List<Group>();
		try
		{
			HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
			httpRequestMessage.Method = new HttpMethod("GET");
			httpRequestMessage.RequestUri = new Uri("https://localhost:7124/api/v1/Group");
			var response = await _http.SendAsync(httpRequestMessage);

			if (response.IsSuccessStatusCode)
			{
				var responseContent = await response.Content.ReadAsStringAsync();
				var respond = JsonConvert.DeserializeObject<GroupGetResponse>(responseContent);
				success = true;
				try
				{
					if (respond.Data != null)
					{
						foreach (var group in respond.Data)
						{
							Chats.Add(group);
						}
					}
				}
				catch (Exception e)
				{
					erroMessage = e.Message;
				}

				//await JSRuntime.InvokeAsync<string>("console.log", "group get", respond.ListGroup);
			}
		}
		catch (Exception ex)
		{
			success = false;
			erroMessage = ex.Message;
		}
		return await Task.FromResult(true);
	}
}
