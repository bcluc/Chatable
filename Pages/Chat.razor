@page "/chat"
@page "/chat/{_id?}"
@using Chatable.Data.Components;
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles.Respond;
@using Chatable.Data.Entitles.Response
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject Blazored.LocalStorage.ILocalStorageService _localStorageService
@inherits LayoutComponentBase
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IHttpClientFactory ClientFactory

<link rel="stylesheet" href="/css/ChatLayout.css">

<style>
	.mud-divider-fullwidth {
		flex-grow: 0;
	}
</style>

<div class="chat-layout">
	<div id="left-banner">
		<SearchField>
		</SearchField> 

		<MudDivider></MudDivider>

		<div class="list-conversations">

			@* <ChatList Loading="_loadingUsers" Chats="Chats" OnUserSelected="OnUserSelected" /> *@
			@if (_loadingUsers)
			{
				<div class="coversation-container">
					<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
					Loading...
				</div>
			}
			else
			{
				@foreach (var chat in Chats)
				{
					<div class="coversation-container @(chat.IsSelected ? "user-select" : "user-unselect")"
					@onclick="() => OnUserSelected(chat)">
						<img class="coversation-img mr-3" src="@chat.Avatar" />
						<div class="d-flex justify-start flex-column" style="flex: 1">
							<div class="d-flex">
								<p class="coversation-name">@chat.Name</p>
								<MudSpacer/>
								<p style="color: gray;">@chat.lastMessage.sendAt</p>
							</div>
							<p class="coversation-last-message">@chat.lastMessage.content</p>
						</div>
					</div>

				}
			}

		</div>
	</div>

	<MudDivider id="v-divider" Vertical="true"/>

	@if (_id == null)
	{
		<div class="wait-chat">
			<p class="wait-chat-title mb-4">Chào mừng đến với <span style="font-weight: 700;">Chatable!</span></p>
			<p class="mb-4" style="font-size: 15px">Hãy bắt đầu cuộc trò chuyện của bạn ngay.</p>
			<img src="@Constant.imgWaitChat" class="wait-chat-img" />
		</div>
	}
	else
	{
		<div id="right-banner">

			<ChatDetail Id="@_id"
			BackToConversationList="BackToConversationList"
			NewIncomingMessage="@_newIncomingMessage"
			OnIncomingMessageRecieved="()=> _newIncomingMessage = null" />
		</div>
	}


</div>

@code {

    /* Code của Lâm */
    void BackToConversationList()
    {
        // isShowChat = false;
        Chats.ForEach(e => e.IsSelected = false);
        _navigationManager.NavigateTo($"/chat");
    }

    /* TODO: Thay đổi cách code chỗ _selectedUser */

    /* Code của Cường */
    [Parameter]
    public string? _id { get; set; }

    private string value2;
    private bool _loadingUsers = false;
    private Conversation? _selectedUser = null;
    private Message? _newIncomingMessage = null;
    private HubConnection? hubConnection;

    // Khi nào run thì đổi
    // = IList.Empty<Conversation>();
    public List<Conversation> Chats = new List<Conversation>();
    private IList<String> states = Constant.states;

    protected override async Task OnInitializedAsync()
    {
        foreach(var chat in Chats)
        {
            chat.IsSelected = false;
        }
        @* base.OnInitialized();
        if (!AuthenticationState.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            if (!await IsTokenExpiredAsync())
            {
                _hubConnection = ConfigureHubConnection();

                _loadingUsers = true;
                var userListTask = GetClient().GetFromJsonAsync<ICollection<UserDto>>("api/users", JsonConverter.JsonSerializerOptions);
                var chatListTask = GetClient().GetFromJsonAsync<IList<UserDto>>("api/users/chats", JsonConverter.JsonSerializerOptions);

                await _hubConnection.StartAsync();

                var usersList = await userListTask;
                if (usersList is not null)
                {
                    Users = usersList;
                }

                var chatsList = await chatListTask;
                if (chatsList is not null)
                {
                    Chats = chatsList;
                }
                _loadingUsers = false;
                await _hubConnection.SendAsync(nameof(IBlazingChatHubServer.SetUserOnline), AuthenticationState.User);
                StateHasChanged();
            }
        } *@
		await GetConversation();
	}

	//private async Task<bool>

	private async Task<IEnumerable<string>> Search2(string value)
	{
		// In real life use an asynchronous function for fetching data from an api.
		await Task.Delay(5);

		// if text is null or empty, don't return values (drop-down will not open)
		if (string.IsNullOrEmpty(value))
			return new string[0];
		// return chat room
		return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	private void OpenAddGroupDialog()
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
		DialogService.Show<Data.Components.Dialog.AddGroup>("Tạo nhóm", options);
	}

	private async Task OnUserSelected(Conversation user)
	{
		/* Code của BC*/
		_selectedUser = user;

		var selectedChatUser = Chats.FirstOrDefault(c => c.IsSelected);
		if (selectedChatUser is not null)
		{
			selectedChatUser.IsSelected = false;
		}

		var chatUser = Chats.FirstOrDefault(c => c.conversationId == user.conversationId);
		//Truong hop Chats null, user dau tien
		if (chatUser is null)
		{
			user.IsSelected = true;
			Chats.Add(user);
		}
		else
		{
			chatUser.IsSelected = true;
		}
		_navigationManager.NavigateTo($"/chat/{user.conversationId}");

		/* Code của Lâm */
		// isShowChat = true;
	}

	private void ConfigureConnection()
	{
		//Tạo hub connection, listen

	}

	private async Task<bool> GetConversation()
	{
		bool success;
		string erroMessage;
		try
		{
			HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
			httpRequestMessage.Method = new HttpMethod("GET");
			httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation");
			var response = await _http.SendAsync(httpRequestMessage);

			if (response.IsSuccessStatusCode)
			{
				var responseContent = await response.Content.ReadAsStringAsync();
				var respond = JsonConvert.DeserializeObject<ApiResponse<List<Conversation>>>(responseContent);
				success = true;
				try
				{
					if (respond.Data != null)
					{
						Chats = respond.Data;
					}
				}
				catch (Exception e)
				{
					erroMessage = e.Message;
				}

				await JSRuntime.InvokeAsync<string>("console.log", "group get", respond.Data);
			}
		}
		catch (Exception ex)
		{
			success = false;
			erroMessage = ex.Message;
		}
		return await Task.FromResult(true);
	}

	private async Task<bool> GetGroup()
	{
		bool success;
		string erroMessage;
		List<Group> groups = new List<Group>();
		try
		{
			HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
			httpRequestMessage.Method = new HttpMethod("GET");
			httpRequestMessage.RequestUri = new Uri(Constant.uriHost+ "Group");
			var response = await _http.SendAsync(httpRequestMessage);

			if (response.IsSuccessStatusCode)
			{
				var responseContent = await response.Content.ReadAsStringAsync();
				var respond = JsonConvert.DeserializeObject<GroupGetResponse>(responseContent);
				success = true;
				try
				{
					if (respond.Data != null)
					{
						foreach (var group in respond.Data)
						{
							Chats.Add(group);
						}
					}
				}
				catch (Exception e)
				{
					erroMessage = e.Message;
				}

				//await JSRuntime.InvokeAsync<string>("console.log", "group get", respond.ListGroup);
			}
		}
		catch (Exception ex)
		{
			success = false;
			erroMessage = ex.Message;
		}
		return await Task.FromResult(true);
	}

	
}
