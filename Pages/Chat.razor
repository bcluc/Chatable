@page "/chat"
@page "/chat/{_conversationType?}/{_id?}"
@using Chatable.DI
@using Chatable.Data.Components;
@using Chatable.Data.Components.ChatDetail
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.DTO
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles.Respond;
@using Chatable.Data.Entitles.Response
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject Blazored.LocalStorage.ILocalStorageService _localStorageService
@inherits LayoutComponentBase
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IHttpClientFactory ClientFactory

<link rel="stylesheet" href="/css/ChatLayout.css">

<style>
	.mud-divider-fullwidth {
		flex-grow: 0;
	}
</style>

<div class="chat-layout">
	<div id="left-banner">
		<SearchField IsSearch = "@_isSearch" IsSearchChanged="SearchFieldChangedHandler">
		</SearchField> 

		<MudDivider></MudDivider>

		@if (!_isSearch)
		{
			@if (_loadingUsers)
			{
				@* <div class="coversation-container">
		<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
		Loading...
		</div> *@
				<div class="d-flex justify-center align-center" style="height: 100%">
					<MudProgressCircular Color="Color.Info" Indeterminate="true" />
				</div>
			}
			else
			{
				<div class="list-conversations">

					@foreach (var chat in Chats)
					{
						bool isToday = chat.lastMessage == null ? false : chat.lastMessage.sentAt.Date == DateTime.Today.Date;
						string avatarUrl = (chat.conversationType == "Peer" ? Constant.uriBaseUserAvt : Constant.uriBaseGroupAvt) + chat.conversationAvatar;
						<div class="coversation-container @(chat.IsSelected ? "user-select" : "user-unselect")"
							 @onclick="() => OnUserSelected(chat)">

							<img class="coversation-img mr-3" src="@avatarUrl" />
							<div class="d-flex justify-start flex-column" style="flex: 1">
								<div class="d-flex mb-1" style="max-width: 180px;">
									<p class="coversation-name">@chat.conversationName</p>
									<MudSpacer />
									@if (chat.lastMessage != null && chat.lastMessage.content != null)
									{
										<p style="color: #AAA; font-weight: 400">@(isToday ? chat.lastMessage.sentAt.ToShortTimeString() : chat.lastMessage.sentAt.ToShortDateString())</p>
									}
								</div>
								<div class="d-flex coversation-last-message">
									@if (chat.lastMessage != null && chat.lastMessage.content != null)
									{
										<p class="last-msg" style="font-weight: @(chat.lastMessage.isSeen ? "normal" : "600"); color: @(chat.lastMessage.isSeen ? "gray" : "black")">
											@((chat.lastMessage.senderId == CurrentUser.currentUser!.userName ? "Bạn: " : "") + chat.lastMessage.content)
										</p>
									}
									else
									{
										<p class="last-msg" style="color: gray">
											Chưa có tin nhắn
										</p>
									}

									@if (chat.lastMessage != null && chat.lastMessage.unreadMsgCount > 0)
									{
										<MudSpacer />
										<p class="ml-2 pa-1 unread-count">
											@chat.lastMessage.unreadMsgCount
										</p>
									}
								</div>
							</div>
						</div>

					}
				</div>
			}
		}

	</div>

	<MudDivider id="v-divider" Vertical="true"/>

	@if (_id == null)
	{
		<div class="wait-chat">
			<p class="wait-chat-title mb-4">Chào mừng đến với <span style="font-weight: 700;">Chatable!</span></p>
			<p class="mb-4" style="font-size: 15px">Hãy bắt đầu cuộc trò chuyện của bạn ngay.</p>
			<img src="@Constant.imgWaitChat" class="wait-chat-img" />
		</div>
	}
	else
	{
		<div id="right-banner">
			<ChatDetail 
				Id = "@_id"
				Type="@_conversationType"
				SelectedConversation="@_selectedUser"
			BackToConversationList="BackToConversationList"
			UpdateUIChat="@UpdateUI"/>
		</div>
	}


</div>

@implements IAsyncDisposable
@inject CurrentUser CurrentUser
@inject MessageHubManager MessageHubManager
@inject ISnackbar Snackbar

@code {

	/* Code của Lâm */
	void BackToConversationList()
	{
		// isShowChat = false;
		Chats.ForEach(e => e.IsSelected = false);
		_navigationManager.NavigateTo($"/chat");
	}

	void UpdateUI(Dictionary<String, Object> lastMsgData)
	{
		// Console.WriteLine("UpdateUI: " + lastMsgData["conversation_id"]);
		for (int i = 0; i < Chats.Count; ++i)
		{
			if (Chats[i].conversationId == lastMsgData["conversation_id"] as String)
			{
				var conversation = Chats[i];
				Chats.RemoveAt(i);
				//
				conversation.lastMessage = lastMsgData["last_msg"] as LastMessageDTO;
				Chats.Insert(0, conversation);
				break;
			}
		}
		StateHasChanged();
	}

	/* TODO: Thay đổi cách code chỗ _selectedUser */

	/* Code của Cường */
	[Parameter]
	public string? _id { get; set; }

	[Parameter]
	public string? _conversationType { get; set; }


	//private AuthenticationState
	private string value2;

	private bool _loadingUsers = true;
	private bool _isSearch = false;

	private Conversation? _selectedUser = null;

	// Khi nào run thì đổi
	// = IList.Empty<Conversation>();
	public List<Conversation> Chats = new List<Conversation>();
	private IList<String> states = Constant.states;

	protected override void OnInitialized()
	{
		Console.WriteLine("OnInitialized Chat.razor");
		MessageHubManager.HubConnection!.On<MessageDTO>("MessageReceived", message =>
		{
			// Console.WriteLine("Page CHAT MessageReceived: " + message.Content);
			// Console.WriteLine("message.ConversationId: " + message.SenderId);
			for (int i = 0; i < Chats.Count; ++i)
			{
				if (Chats[i].conversationId == message.SenderId)
				{
					var conversation = Chats[i];
					Chats.RemoveAt(i);
					//
					conversation.lastMessage = new LastMessageDTO(
						message.SenderId, 
						message.MessageType, 
						message.Content, 
						message.SentAt, 
						null, 
						false,
						conversation.lastMessage!.unreadMsgCount + 1
					);
					Chats.Insert(0, conversation);
					break;
				}
			}
			InvokeAsync(StateHasChanged);
		});


		MessageHubManager.HubConnection!.On<MessageDTO>("MessageReceivedFromGroup", message =>
		{
			// Console.WriteLine("Page CHAT MessageReceivedFromGroup: " + message.Content);
			// Console.WriteLine("message.ConversationId: " + message.GroupId);
			for (int i = 0; i < Chats.Count; ++i)
			{
				if (Chats[i].conversationId == message.GroupId)
				{
					var conversation = Chats[i];
					Chats.RemoveAt(i);
					//
					conversation.lastMessage = new LastMessageDTO(
						message.SenderId, 
						message.MessageType, 
						message.Content, 
						message.SentAt, 
						message.GroupId, 
						false, 
						conversation.lastMessage!.unreadMsgCount + 1
					);
					Chats.Insert(0, conversation);
					break;
				}
			}
			InvokeAsync(StateHasChanged);
		});
                                      
		MessageHubManager.HubConnection!.
		On<Conversation>("NewConversationReceived", newConversation =>
		{
			Console.WriteLine("Page CHAT NewConversationReceived: " + CurrentUser.currentUser.userName);
			// Console.WriteLine("newConversation.ConversationId: " + newConversation.ConversationId);
			// Console.WriteLine("newConversation.ConversationName: " + newConversation.ConversationName);
			Chats.Insert(0, newConversation);
			InvokeAsync(StateHasChanged);
		});

		MessageHubManager.HubConnection!.On<RequestDTO>("FriendRequestReceived", request =>
		{
			Console.WriteLine("id send: " + request.UserId);
			Snackbar.Add(
				"Sale Table has changed", Severity.Success
			);
			InvokeAsync(StateHasChanged);
		});
	}

	protected override async Task OnParametersSetAsync()
	{
		if (_selectedUser is null && _id is not null) {
			await GetAllConversations();
			await GetSelectedConversation();
		}

	}

	protected override async Task OnInitializedAsync()
	{
		if (_id is null) await GetAllConversations();
		foreach (var chat in Chats)
		{
			chat.IsSelected = false;
			if (chat.conversationId == _id) chat.IsSelected = true;
		}

	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!Chats.Any()) await base.OnInitializedAsync();
	}
	
	// protected override async Task OnAfterRenderAsync(bool firstRender)
	// {
	// 	if (!Chats.Any()) await base.OnInitializedAsync();
	// }

	private void OpenAddGroupDialog()
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
		DialogService.Show<Data.Components.Dialog.Add.AddGroup>("Tạo nhóm", options);
	}

	private async Task OnUserSelected(Conversation user)
	{
		/* Code của BC*/
		_selectedUser = user;
		_id = user.conversationId;

		/* Loại bỏ màu nền cho tất cả Conversation*/
		var selectedChatUser = Chats.FirstOrDefault(c => c.IsSelected);
		if (selectedChatUser is not null)
		{
			selectedChatUser.IsSelected = false;
		}

		/* Tô màu cho Conversation được chọn */
		var chatUser = Chats.FirstOrDefault(c => c.conversationId == user.conversationId);
		//Truong hop Chats null, user dau tien
		if (chatUser is null)
		{
			user.IsSelected = true;
			Chats.Add(user);
		}
		else
		{
			chatUser.IsSelected = true;
		}

		user.lastMessage!.isSeen = true;
		user.lastMessage.unreadMsgCount = 0;

		_navigationManager.NavigateTo($"/chat/{user.conversationType}/{user.conversationId}");
	}

	private async Task<bool> GetSelectedConversation()
	{
		if (_id == null) return await Task.FromResult(false);
		else
		{
			bool success;
			string erroMessage;
			try
			{
				HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
				httpRequestMessage.Method = new HttpMethod("GET");
				// FIX TẠM
				httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
				httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation/" + _conversationType + "/" + _id);
				var response = await _http.SendAsync(httpRequestMessage);

				if (response.IsSuccessStatusCode)
				{
					var responseContent = await response.Content.ReadAsStringAsync();
					var respond = JsonConvert.DeserializeObject<ApiResponse<Conversation>>(responseContent);
					success = true;
					try
					{
						if (respond.Data != null)
						{
							_selectedUser = respond.Data;

						}
					}
					catch (Exception e)
					{
						erroMessage = e.Message;
					}

				}
			}
			catch (Exception ex)
			{
				success = false;
				erroMessage = ex.Message;
			}
			return await Task.FromResult(true);
		}

	}

	private async Task<bool> GetAllConversations()
	{
		bool success;
		string erroMessage;
		try
		{
			HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
			httpRequestMessage.Method = new HttpMethod("GET");
			httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation");
			httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

			var response = await _http.SendAsync(httpRequestMessage);

			if (response.IsSuccessStatusCode)
			{
				var responseContent = await response.Content.ReadAsStringAsync();
				var respond = JsonConvert.DeserializeObject<ApiResponse<List<Conversation>>>(responseContent);
				success = true;
				try
				{
					if (respond.Data != null)
					{
						Chats = respond.Data;
						// Console.WriteLine("Conversations.Count = " + Chats[0].lastMessage.isSeen);
					}
				}
				catch (Exception e)
				{
					erroMessage = e.Message;
				}

				//await JSRuntime.InvokeAsync<string>("console.log", "group get", respond.Data);
			}
		}
		catch (Exception ex)
		{
			success = false;
			erroMessage = ex.Message;
		}
		_loadingUsers = false;
		return await Task.FromResult(true);
	}
	
	public async ValueTask DisposeAsync()
	{

	}

	// Update Search
	private void SearchFieldChangedHandler(bool newValue)
	{
		_isSearch = newValue;
	}
}
