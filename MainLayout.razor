@using AgoraRTC.Models
@using Chatable.DI
@using Chatable.Data.Components.Dialog.Lam
@using Chatable.Data.Entitles;
@using Chatable.Data.Components.Dialog.Profile;
@using Chatable.Data.Entitles.Model;
@using System.Globalization;
@using System.Net.Http;
@using Chatable.Data.Entitles.Respond
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json;

@inject HttpClient _http
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<link rel="stylesheet" href="/css/MainLayout.css">

<audio id="audioPlayer" loop>
    <source src="assets/audio/nhac_chuong_do_choi_dien_thoai.mp3" type="audio/mp3" />
</audio>


<div class="sidebar">
    <div class="user">
        <div class="user_img">
            <img src="@(Constant.uriBaseUserAvt +currentUser.avatarUrl)" style="width: 52px; height: 52px; border-radius: 100%" @onclick="OpenDialog" />

        </div>
        <p>@currentUser.fullName</p>
    </div>
    <ul>
        @for (int i = 0; i <= 1; ++i)
        {
            var currentIndex = i;
            <li class="@(currentPageIndex == i ? "current-page" : "")"
            @onclick="() => changeCurrentPageIndex(currentIndex)">
                <a href="@menuItems[i].page">
                    <logo class="@menuItems[i].icon"></logo>
                    <p>@menuItems[i].title</p>
                </a>
            </li>
        }
    </ul>

    <div class="bottom-list">
        <ul>
            <li @onclick="() => OpenConfirmLogoutDialog()">
                <a>
                    <logo class="@menuItems[3].icon" />
                    <p>@menuItems[3].title</p>
                </a>
            </li>
        </ul>
    </div>

</div>
<div class="main_container">
    @Body
</div>

@* Code của Lâm *@
@code {
    private class MenuItem
    {
        public string? page { get; set; }
        public string? icon { get; set; }
        public string? title { get; set; }
    }

    private MenuItem[] menuItems = new MenuItem[]
    {
        new MenuItem {
            page = "chat",
            icon = "fa-solid fa-comments",
            title = "Trò chuyện",
        },
        new MenuItem {
            page = "contact/friendList",
            icon = "fa-solid fa-address-book",
            title = "Danh bạ",
        },
        new MenuItem {
            page = "setting",
            icon = "fa-solid fa-gear",
            title = "Cài đặt",
        },
        new MenuItem {
            page = "",
            icon = "bx bx-log-out",
            title = "Đăng xuất",
        },
    };

    private int currentPageIndex = 0;

    private void changeCurrentPageIndex(int index)
    {
        currentPageIndex = index;
    }
}

@using Chatable.Data.Components.Dialog;

@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

@inject CurrentUser CurrentUser
@inject CallHubManager CallHubManager
@inject MessageHubManager MessageHubManager

@implements IAsyncDisposable

@code {
    User currentUser;
    bool themeOn = false;

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Data.Components.Dialog.Profile.DialogProfile>("Thông tin cá nhân", options);
    }
    private void OpenConfirmLogoutDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<LogoutDialog>("Xác nhận", options);
    }

    /* Lâm */
    protected override void OnInitialized()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Hello MainLayout");

        currentUser = CurrentUser.currentUser!;
        Console.WriteLine("Hello SetUpMessageHub");

        await SetUpMessageHub();
        await SetUpCallHub();
    }

    protected override async Task OnParametersSetAsync()
    {
    }

    public async Task SetUpMessageHub()
    {
        // Connect Message-Hub
        MessageHubManager.HubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7124/messages-hub?access_token={CurrentUser.token!.accessToken}")
            .Build();

        await MessageHubManager.HubConnection.StartAsync();
        // Console.WriteLine($"messageHubConnection = {messageHubConnection.ConnectionId}");
    }

    public async Task SetUpCallHub()
    {
        CallHubManager.HubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7124/call-hub")
            .Build();

        await CallHubManager.HubConnection.StartAsync();

        await CallHubManager.HubConnection.SendAsync("AddMapping", CurrentUser.currentUser!.userName);

        CallHubManager.HubConnection.On<string, PeerInfo, string, string>("inviteCall", (callerConnectionId, callerInfo, typeCall, roomId) =>
        {
        // Console.WriteLine("CallHubManager.isIdle: " + CallHubManager.isIdle);
            @* Console.WriteLine("Nhận cuộc gọi từ " + callerInfo.Name); *@
            if (CallHubManager.isIdle)
            {
                CallHubManager.isIdle = false;
                InvokeAsync(() => OpenNotificationDialog(callerConnectionId, callerInfo, typeCall, roomId));
            }
            else
            {
                // Người nhận đang ở trong cuộc gọi khác
                CallHubManager.HubConnection!.SendAsync("SendResponseCallTo", callerConnectionId, "inAnotherCall");
            }

        });

        CallHubManager.HubConnection.On<string>("missingCall", callerId =>
        {
            // Console.WriteLine("Đã bỏ lỡ cuộc gọi từ " + callerId);
            InvokeAsync(() => dialogReference!.Close(DialogResult.Cancel()));
        });
    }

    IDialogReference? dialogReference;

    public async void OpenNotificationDialog(string callerConnectionId, PeerInfo callerInfo, string typeCall, string roomId)
    {
        DialogOptions options = new DialogOptions
            {
                FullWidth = false,
                CloseOnEscapeKey = false,
                DisableBackdropClick = true,
                NoHeader = true,
            };

        DialogParameters keyValues = new DialogParameters();
        keyValues.Add("callerName", callerInfo.Name);
        keyValues.Add("callerAvt", callerInfo.AvatarUrl);
        keyValues.Add("typeCall", typeCall);

        dialogReference = DialogService.Show<CallDialog>("", keyValues, options);
        var result = await dialogReference.Result;

        if (result.Canceled)
        {
            Console.WriteLine("Nhận được một cuộc gọi nhỡ");
            CallHubManager.isIdle = true;
        }

        if (result.Data as string == "reject")
        {
            // Từ chối cuộc gọi
            await CallHubManager.HubConnection!.SendAsync("SendResponseCallTo", callerConnectionId, "rejectCall");
            CallHubManager.isIdle = true;
        }
        if (result.Data as string == "accept")
        {
            // Chấp nhận cuộc gọi
            // Console.WriteLine("Accept Call");
            await CallHubManager.HubConnection!.SendAsync("SendResponseCallTo", callerConnectionId, "acceptCall");

            string avatar = CurrentUser.currentUser!.avatarUrl.Split('?')[0];
            // Console.WriteLine("CurrentUser.currentUser!.avatarUrl = " + avatar);

            await JSRuntime.InvokeVoidAsync(
                "joinRoomGoiDien",
                roomId,
                CurrentUser.currentUser!.fullName,
                // "user-test",
                avatar,
                typeCall,
                DotNetObjectReference.Create(this)
            );

        }
    }

    [JSInvokable]
    public void setIdleToTrue()
    {
        // Console.WriteLine("setIdleToTrue");
        CallHubManager.isIdle = true;
    }

    public async ValueTask DisposeAsync()
    {
        await MessageHubManager.HubConnection!.DisposeAsync();
        await CallHubManager.HubConnection!.DisposeAsync();
        Console.WriteLine("Bye MainLayout");
    }

}