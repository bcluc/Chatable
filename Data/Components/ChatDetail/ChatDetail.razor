@using Chatable.DI
@using Chatable.Data.Entitles.DTO
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.Respond;
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json;
@using System.Net.Http.Headers

@inject HttpClient Client
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="/css/ChatDetail.css">

@*
Chi tiết chat gồm 3 phần
- Header chứa Tên, Status, Voice, Video Call
- Danh sách tin nhắn
- Component dungf ddeer gửi tin nhắn
*@
<div class="container">
    <div class="header">
        <MudIconButton id="back-btn" Class="mr-3" OnClick="BackToConversationList">
            <i class="fa-solid fa-chevron-left fa-lg"></i>
        </MudIconButton>
        @if (SelectedConversation != null)
            {
            <img class="coversation-img mr-3" src="@((SelectedConversation.conversationType == "Peer" ? Constant.uriBaseUserAvt : Constant.uriBaseGroupAvt) + SelectedConversation.conversationAvatar)" />
            <div class="d-flex flex-column" style="width: 160px">

                <p class="receiver-name">@SelectedConversation.conversationName</p>
                @if (SelectedConversation.conversationType == "Peer")
                {
                    <p class="receiver-status">@onlineStatus</p>
                }
            
        </div>
        }
        <MudSpacer />
        <MudIconButton Class="mr-2" OnClick=@(() => Call("voice")) Style="border-radius: 8px">
            <i class="fa-solid fa-phone fa-xl" style="color: #0091ff;"></i>
        </MudIconButton>
        <MudIconButton OnClick=@(() => Call("video")) Style="border-radius: 8px">
            <i class="fa-solid fa-video fa-xl" style="color: #0091ff;"></i>
        </MudIconButton>
    </div>

    <MudDivider></MudDivider>
    <div class="chat-container">
            <img src="@Constant.waterMark" class="water-mark-img" />
            <div class="messages-list">

            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <div class="header d-flex justify-content-between bg-danger">
                    <span class="text-white">@_errorMessage</span>
                    <button class="btn btn-danger btn-sm" @onclick="() => _errorMessage = null">x</button>
                </div>
            }
            @if (!string.IsNullOrWhiteSpace(_infoMessage))
            {
                <div class="header d-flex justify-content-between bg-warning">
                    <span class="text-white">@_infoMessage</span>
                </div>
            }
            @if (SelectedConversation != null)
            {
                <ul id="messages-ul" style="padding: 5px">
                    @if (_loadingMessages)
                    {
                        <li class="list-group-item">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading messages...
                        </li>
                    }
                    else
                    {
                        @for (int i = 0; i < _messages.Count; ++i)
                        {
                            bool isFirst;
                            bool isSameDateWithPreMsg;

                            if (i == 0)
                            {
                                isFirst = true;
                                isSameDateWithPreMsg = false;
                            }
                            else
                            {
                                isFirst = _messages[i].SenderId != _messages[i - 1].SenderId;
                                isSameDateWithPreMsg = _messages[i].SentAt.Date == _messages[i - 1].SentAt.Date;
                            }

                            <MessageItem Msg="_messages[i]" IsFirstMsg="isFirst" IsSameDateWithPreMsg="isSameDateWithPreMsg" ConversationType="@SelectedConversation.conversationType"/>
                        }

                }
            </ul>
            }
        </div>
    </div>

    <MudDivider />

    <div id="utils-message">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" Accept=".png, .jpg, .jpeg" Class="mr-1">
            <ButtonTemplate>
                <MudIconButton HtmlTag="label"
                               DisableElevation="true"
                               for="@context.Id">
                    <i class="fa-regular fa-image fa-xl"></i>
                </MudIconButton>
            </ButtonTemplate>
        </MudFileUpload>

        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" Accept=".mp4, .avi, .mov">
            <ButtonTemplate>
                <MudIconButton HtmlTag="label"
                               DisableElevation="true"
                               for="@context.Id">
                    <i class="fa-solid fa-film fa-xl"></i>
                </MudIconButton>
            </ButtonTemplate>
        </MudFileUpload>

    </div>

    <MudDivider />

    @*
    Không được xóa id="message-input",
    nó dùng để phân biệt với các MudTextField khác để style
    *@
    <div id="message-input">
        <MudTextField Placeholder="Nhập tin nhắn" @bind-Value="_newMessage" Variant="Variant.Text" DisableUnderLine="true"></MudTextField>
        <button class="btn-send mx-4" @onclick="SendMessage">Gửi</button>
    </div>

</div>

<style>

</style>

@inject CallHubManager CallHubManager
@inject MessageHubManager MessageHubManager
@inject CurrentUser CurrentUser

@code {

    /* Code của Lâm */
    [Parameter]
    public EventCallback BackToConversationList { get; set; }

    /* Code của Cường */
    private User currentUser;
    [Parameter]
    public Conversation? SelectedConversation { get; set; } 

    [Parameter]
    public string? Id {get; set;}
    [Parameter]
    public string? Type { get; set; }

    [Parameter]
    public EventCallback OnIncomingMessageRecieved { get; set; }

    [Parameter]
    public MessageDTO? NewIncomingMessage { get; set; }

    private List<MessageDTO> _messages = new List<MessageDTO>();

    private string _newMessage = "";
    private string? _errorMessage;
    private string? _infoMessage;
    private string previousSelectedUserId = "";
    private bool _loadingMessages = false;
    private bool _loadingConversation = false;

    private string onlineStatus = "";

    protected override void OnInitialized()
    {
        Console.WriteLine("init-detail");

        currentUser = CurrentUser.currentUser!;

        MessageHubManager.HubConnection!.On<MessageDTO>("MessageReceived", message =>
        {
            Console.WriteLine("MessageReceived: " + message.Content);
            _messages.Add(message);
            permitScroll = "smooth";
            InvokeAsync(StateHasChanged);
        });

        MessageHubManager.HubConnection!.On<MessageDTO>("MessageReceivedFromGroup", message =>
        {
            Console.WriteLine("MessageReceivedFromGroup: " + message.Content);
            _messages.Add(message);
            permitScroll = "smooth";
            InvokeAsync(StateHasChanged);
        });
    }
      
    string permitScroll = "";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (permitScroll != "")
        {
            await Task.Delay(permitScroll == "instant" ? 0 : 300); // Độ trễ 1 giây
            await JSRuntime.InvokeVoidAsync("scrollMessagesListToBottom", permitScroll);
            permitScroll = "";
        } 

    }
      
    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("parameter-detail");

        if (NewIncomingMessage is not null)
        {
            //_messages.Add(NewIncomingMessage);
            await OnIncomingMessageRecieved.InvokeAsync();
        }

        if (SelectedConversation is not null && SelectedConversation.conversationId != previousSelectedUserId)
        {
            previousSelectedUserId = SelectedConversation.conversationId;
            await GetConversationMessages();
        }

        // Get Online status
        if (SelectedConversation.conversationType == "Peer")
        {
            string erroMessage;
            try
            {
                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("GET");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User/OnlineStatus/" + Id);
                httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var respond = JsonConvert.DeserializeObject<ApiResponse<String>>(responseContent);
                    try
                    {
                        if (respond.Data != null)
                        {
                            // Console.WriteLine("Get Online Status Success");
                            onlineStatus = respond.Data;
                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Get Online Status FAIL");
                        erroMessage = e.Message;
                    }

                }
            }
            catch (Exception ex)
            {
                erroMessage = ex.Message;
            }
        }
    }
    //Get SelectedConversation
    private async Task<bool> GetSelectedConversation()
    {
        if (Id == null) return await Task.FromResult(false);
        else
        {
            bool success;
            string erroMessage;
            try
            {
                _loadingConversation = true;
                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("GET");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation/"+Type+"/"+Id);
                httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var respond = JsonConvert.DeserializeObject<ApiResponse<Conversation>>(responseContent);
                    success = true;
                    try
                    {
                        if (respond.Data != null)
                        {
                            SelectedConversation = respond.Data;
                            _infoMessage = null;

                        }
                        else
                        {
                            _infoMessage = $"Không có cuộc trò chuyện nào giữa bạn và {SelectedConversation.conversationName}";
                        }
                    }
                    catch (Exception e)
                    {
                        erroMessage = e.Message;
                    }

                }
            }
            catch (Exception ex)
            {
                success = false;
                erroMessage = ex.Message;
            }
            finally
            {
                _loadingConversation = false;
            }
            return await Task.FromResult(true);
        }
    }

    //Get Conversation
    private async Task<bool> GetConversationMessages()
    {
        if (SelectedConversation == null) return await Task.FromResult(false);
        else
        {
            bool success;
            string erroMessage;
            try
            {
                _loadingMessages = true;
                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("GET");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation/" + SelectedConversation.conversationType+"/" + SelectedConversation.conversationId+ "/Messages");
                httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var respond = JsonConvert.DeserializeObject<ApiResponse<List<MessageDTO>>>(responseContent);
                    success = true;
                    try
                    {
                        if (respond.Data != null)
                        {
                            _messages = respond.Data;
                            _infoMessage = null;
                        }
                        else
                        {
                            _infoMessage = $"Không có cuộc trò chuyện nào giữa bạn và {SelectedConversation.conversationName}";
                        }
                    }
                    catch (Exception e)
                    {
                        erroMessage = e.Message;
                    }

                }
            }
            catch (Exception ex)
            {
                success = false;
                erroMessage = ex.Message;
            }
            finally
            {
                permitScroll = "smooth";
                _loadingMessages = false;
            }
            return await Task.FromResult(true);
        }

    }

    // Get nguoi dung
    // private async Task<bool> GetUser()
    // {
    //     bool success;
    //     string erroMessage;
    //     try
    //     {
    //         HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
    //         httpRequestMessage.Method = new HttpMethod("GET");
    //         httpRequestMessage.RequestUri = new Uri( Constant.uriHost + "User/{SelectedUser.conversationId}");
    //         var response = await _http.SendAsync(httpRequestMessage);

    //         if (response.IsSuccessStatusCode)
    //         {
    //             var responseContent = await response.Content.ReadAsStringAsync();
    //             var respond = JsonConvert.DeserializeObject<ApiResponse<User>>(responseContent);
    //             success = true;
    //             try
    //             {
    //                 if (respond.Data != null)
    //                 {
    //                     // SelectedUser = respond.Data;
    //                 }
    //             }
    //             catch (Exception e)
    //             {
    //                 erroMessage = e.Message;
    //             }

    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         success = false;
    //         erroMessage = ex.Message;
    //     }
    //     return await Task.FromResult(true);
    // }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(_newMessage))
        {
            // Console.WriteLine("_newMessage: " + _newMessage);
            if (SelectedConversation!.conversationType == "Peer")
            {
                await MessageHubManager.HubConnection!.SendAsync("SendPeerMessage", Id, "text", _newMessage);
            }
            else
            {
                await MessageHubManager.HubConnection!.SendAsync("SendGroupMessage", Id, "text", _newMessage);
            }

            permitScroll = "instant";

            _messages.Add(new MessageDTO(currentUser.userName, "text", _newMessage, DateTime.UtcNow, "", "", ""));
            _newMessage = "";

        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        // Console.WriteLine("file: " + file.ContentType);

        string fileType = GetFileType(file);

        using var content = new MultipartFormDataContent();
        content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);

        HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
        httpRequestMessage.Method = new HttpMethod("POST");
        httpRequestMessage.RequestUri = new Uri(Constant.uriHost + $"Conversation/{SelectedConversation.conversationType}/{SelectedConversation.conversationId}/Messages/{fileType}");
        httpRequestMessage.Content = content;
        httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

        var response = await _http.SendAsync(
            httpRequestMessage
        );
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            if (responseContent != null)
            {
                ApiResponse<String> apiResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse<String>>(responseContent);
                string imageUrl = apiResponse.Data;
                _messages.Add(
                    new MessageDTO(
                        currentUser.userName,
                        fileType,
                        imageUrl,
                        DateTime.UtcNow,
                        "",
                        "",
                        ""
                    )
                );
            }

        }
        else
        {
            // Xử lý lỗi nếu có
            Console.WriteLine($"Error uploading file. Status code: {response.StatusCode}");
        }
    }

    string GetFileType(IBrowserFile file)
    {
        if (file.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase))
        {
            return "image";
        }
        if (file.ContentType.StartsWith("video", StringComparison.OrdinalIgnoreCase))
        {
            return "video";
        }
        return "unknow";
    }

    private async Task Call(string typeCall)
    {
        HubConnection callHubConnection = CallHubManager.HubConnection!;

        var roomId = CurrentUser.currentUser!.userName + Id;
        // Console.WriteLine("CurrentUser.currentUser!.userName: " + CurrentUser.currentUser!.userName);

        CallHubManager.isIdle = false;

        string callerAvatar = CurrentUser.currentUser!.avatarUrl.Split('?')[0];
        string receiverAvatar = SelectedConversation!.conversationAvatar.Split('?')[0];

        await JSRuntime.InvokeVoidAsync(
            "moCuaSoGoiDien",
            CurrentUser.currentUser.userName,
            CurrentUser.currentUser.fullName,
            callerAvatar,
            Id,
            SelectedConversation!.conversationName,
            receiverAvatar,
            typeCall,
            SelectedConversation.conversationType,
            DotNetObjectReference.Create(this)
        );

        await JSRuntime.InvokeVoidAsync("phatNhacChuong");
    }

    [JSInvokable]
    public void setIdleToTrue()
    {
        // Console.WriteLine("setIdleToTrue");
        CallHubManager.isIdle = true;
    }
}
