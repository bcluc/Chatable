@using Chatable.DI
@using Chatable.Data.Components.Dialog.Lam
@using Chatable.Data.Entitles
@using Chatable.Data.Entitles.DTO
@using System.Net.Http.Headers
@using Chatable.Data.Entitles.Model
@using Chatable.Data.Entitles.Respond
<li class="d-flex align-center @cls @(IsFirstMsg ? "mt-3" : "")">
    @if (isMyMessage)
    {
        <MudIconButton OnClick="() => ForwardMsg(Msg.MessageType)" Class="forward mr-2" Style="border-radius: 8px">
            <i class="fa-solid fa-share fa-xl" style="color: #0091ff;"></i>
        </MudIconButton>

        <MudIconButton OnClick="() => OpenReactionDialog()" Class="forward mr-2" Style="border-radius: 8px">
            <i class=" fa-solid fa-heart fa-xl" style="color: #0091ff;"></i>
        </MudIconButton>

        if (Msg.MessageType != "text")
        {
            <MudIconButton OnClick="() => DownloadFile(Msg.Content)" Class="forward mr-2" Style="border-radius: 8px">
                <i class="fa-solid fa-download fa-xl" style="color: #0091ff;"></i>
            </MudIconButton>
        }
    }

    @if (!isMyMessage && IsFirstMsg)
    {
        <img class="coversation-img mr-3 align-self-start" src="@(Constant.uriBaseUserAvt + Msg.SenderAvatar)" />
    }

    <div class="single-msg @(isMyMessage ? "me" : "other") @(Msg.MessageType)-msg @(Msg.Reactions != null && Msg.Reactions.Count > 0 ? "has-reaction" : "")"
         style="@(!isMyMessage && !IsFirstMsg ? "margin-left: 62px" : ""); position: relative">
        <p>
            @if (!isMyMessage && IsFirstMsg && ConversationType == "Group")
            {
                <span class="mb-2" style="font-size: 13px; color: gray">@Msg.SenderName</span>
                <br />
            }
            @if (Msg.MessageType == "text")
            {
                @Msg.Content
            }
            @if (Msg.MessageType == "image")
            {
                <MudImage Src="@Msg.Content" Fluid="true" Class="rounded-lg" />
            }
            @if (Msg.MessageType == "video")
            {
                <video src="@Msg.Content" controls
                       class="rounded-lg" style="max-width: 100%" />
            }
            <br />
            <small class="msg-dt" style="color: @(isMyMessage ? "while" : "gray")">
                @if (isToday || (IsSameDateWithPreMsg))
                {
                    <span>@Msg.SentAt.ToShortTimeString()</span>
                }
                else
                {
                    <span>@Msg.SentAt.ToShortDateString() | @Msg.SentAt.ToShortTimeString()</span>
                }
            </small>

            @if (Msg.Reactions != null && Msg.Reactions.Count > 0)
            {
                // Console.WriteLine("Msg.Reactions.Count: " + Msg.Reactions.Count);
                <div class="d-flex justify-center align-center reactions"
                     @onclick="OpenDetailReactionDialog">
                    @{
                        HashSet<int> typeReactionSet = new HashSet<int>(Msg.Reactions.Select(r => r.Type));
                        foreach (int typeReaction in typeReactionSet)
                        {
                            var reaction = Utils.MapToIcon(typeReaction);
                            <i class="@reaction.icon mx-1 reaction"
                               style="color: @reaction.color">
                            </i>
                        }
                    }
                    @if (@Msg.Reactions.Count > 1) 
                    {
                        <p class="mx-1" style="color: black; font-family: Arial; font-size: 14px; font-weight: bold">
                            @Msg.Reactions.Count
                        </p>
                    }

                </div>
            }

        </p>

    </div>

    @if (!isMyMessage)
    {
        <MudIconButton OnClick="() => ForwardMsg(Msg.MessageType)" Class="forward ml-2" Style="border-radius: 8px">
            <i class="fa-solid fa-share fa-xl" style="color: #0091ff;"></i>
        </MudIconButton>
        <MudIconButton OnClick="() => OpenReactionDialog()" Class="forward mr-2" Style="border-radius: 8px">
            <i class=" fa-solid fa-heart fa-xl" style="color: #0091ff;"></i>
        </MudIconButton>

        if (Msg.MessageType != "text")
        {
            <MudIconButton OnClick="() => DownloadFile(Msg.Content)" Class="forward mr-2" Style="border-radius: 8px">
                <i class="fa-solid fa-download fa-xl" style="color: #0091ff;"></i>
            </MudIconButton>
        }
    }
</li>

@inject CurrentUser CurrentUser

@inject IDialogService DialogService

@inject HttpClient _http

@using Chatable.Helpers
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json;

@inject IJSRuntime JSRuntime

@inject IDialogService DialogService

@inject MessageHubManager MessageHubManager;

@code {
    [Parameter]
    public MessageDTO Msg { get; set; }

    [Parameter]
    public bool IsFirstMsg { get; set; }

    [Parameter]
    public bool IsSameDateWithPreMsg { get; set; }

    [Parameter]
    public string ConversationId { get; set; }

    [Parameter]
    public string ConversationType { get; set; }

    [Parameter]
    public EventCallback<Dictionary<String, Object>> UpdateUIChat { get; set; }

    public bool isMyMessage;
    public bool isToday;
    public string cls;

    IDialogReference? dialogReference;

    protected override void OnParametersSet()
    {
        // Console.WriteLine("Msg.Id = " + Msg.MessageId);

        isMyMessage = Msg.SenderId == CurrentUser.currentUser!.userName;
        isToday = Msg.SentAt.Date == DateTime.Today.Date;

        cls = $"justify-content-{(isMyMessage ? "end" : "start")}";
    }

    private async Task ForwardMsg(string msgType)
    {
        DialogOptions options = new DialogOptions
            {
                FullWidth = false,
                CloseOnEscapeKey = false,
                DisableBackdropClick = false,
                NoHeader = true,
            };

        DialogParameters keyValues = new DialogParameters();
        keyValues.Add("Msg", Msg);
        keyValues.Add("UpdateUIChat", UpdateUIChat);

        dialogReference = DialogService.Show<ForwardMessageDialog>("", keyValues, options);
        var result = await dialogReference.Result;
    }

    private async Task DownloadFile(string fileUrl)
    {
        string fileName = fileUrl.Split('/').Last().Split('?').First();
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileUrl);
    }

    private async void OpenReactionDialog()
    {
        DialogOptions options = new DialogOptions
        {
            FullWidth = false,
            CloseOnEscapeKey = false,
            DisableBackdropClick = false,
            NoHeader = true,
        };

        dialogReference = DialogService.Show<ReactionDialog>("", options);

        var result = await dialogReference.Result;

        if (!result.Canceled)
        {
            // Console.WriteLine("Reacted: " + result.Data);

            await MessageHubManager.HubConnection!.SendAsync("ReactMessage", ConversationId, ConversationType, Msg.MessageId, result.Data);

            int existingReactedIndex = -1;

            for (int i = 0; i < Msg.Reactions.Count; ++i)
            {
                if (Msg.Reactions[i].SenderId == CurrentUser.currentUser!.userName)
                {
                    existingReactedIndex = i;
                    Msg.Reactions[i].Type = (int)result.Data;
                    break;
                }
            }

            // Console.WriteLine("Reacted: " + result.Data);
            // Console.WriteLine("existingReactedIndex: " + existingReactedIndex);

            if (existingReactedIndex == -1)
            {
                Msg.Reactions.Add(new ReactionMessage
                    {
                        Type = (int)result.Data,
                        SenderId = CurrentUser.currentUser!.userName,
                        SenderName = CurrentUser.currentUser!.fullName,
                        SenderAvatar = CurrentUser.currentUser!.avatarUrl,
                    });
            }
            StateHasChanged();
        }
    }

    private void OpenDetailReactionDialog()
    {
        DialogOptions options = new DialogOptions
            {
                FullWidth = false,
                CloseOnEscapeKey = false,
                DisableBackdropClick = false,
                NoHeader = true,
            };

        DialogParameters keyValues = new DialogParameters();
        keyValues.Add("ReactionMessages", Msg.Reactions);

        dialogReference = DialogService.Show<DetailReactionDialog>("", keyValues, options);
    }
}

