@using Chatable.Data.Entitles.DTO
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.Respond;
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject HttpClient Client
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="/css/ChatDetail.css">

@*
Chi tiết chat gồm 3 phần
- Header chứa Tên, Status, Voice, Video Call
- Danh sách tin nhắn
- Component dungf ddeer gửi tin nhắn
*@


<div class="container">

    <div class="header">
        <MudIconButton id="back-btn" Class="mr-3" OnClick="BackToConversationList">
            <i class="fa-solid fa-chevron-left fa-lg"></i>
        </MudIconButton>
        @*         <img class="coversation-img mr-3" src="@SelectedConversation.conversationAvatar" />*@
         <div class="d-flex flex-column" style="width: 160px">
            <p class="receiver-name">@_testString</p>
            <p class="receiver-status">Đang hoạt động</p>
        </div>
        <MudSpacer />
        <MudIconButton Class="mr-2" Style="border-radius: 8px">
            <i class="fa-solid fa-phone fa-xl" style="color: #0091ff;"></i>
        </MudIconButton>
        <MudIconButton Style="border-radius: 8px">
            <i class="fa-solid fa-video fa-xl" style="color: #0091ff;"></i>
        </MudIconButton>		

    </div>

    <MudDivider></MudDivider>
    <div class="chat-container">
        <img src="@Constant.waterMark" class="water-mark-img" />
        <div class="messages-list">
           
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <div class="header d-flex justify-content-between bg-danger">
                    <span class="text-white">@_errorMessage</span>
                    <button class="btn btn-danger btn-sm" @onclick="() => _errorMessage = null">x</button>
                </div>
            }
            @if (!string.IsNullOrWhiteSpace(_infoMessage))
            {
                <div class="header d-flex justify-content-between bg-warning">
                    <span class="text-white">@_infoMessage</span>
                </div>
            }
            <ul id="messages-ul" style="padding: 5px">
                @if (_loadingMessages)
                {
                    <li class="list-group-item">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Loading messages...
                    </li>
                }
                else
                {
                    @foreach (var msg in _messages)
                    {
                        var incoming = msg.SenderId == currentUser.userName;
                        var isToday = msg.SendAt.Date == DateTime.Today.Date;

                        var cls = $"justify-content-{(incoming ? "start" : "end")}";


                        <li class="d-flex @cls">
                            <p class="single-msg @(incoming ? "other" : "me")">
                                @msg.Content
                                <br>
                                <small class="msg-dt">
                                    @if (isToday)
                                    {
                                        <span>@msg.SendAt.ToShortTimeString()</span>
                                    }
                                    else
                                    {
                                        <span>@msg.SendAt.ToShortDateString() | @msg.SendAt.ToShortTimeString()</span>
                                    }
                                </small>
                            </p>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
   
    

    <div>

        <MudDivider />

        <div id="utils-message">
            <MudIconButton DisableElevation="true">
                <i class="fa-regular fa-image fa-xl"></i>
            </MudIconButton>
            <MudIconButton DisableElevation="true"
                           Style=" margin-left: 2px">
                <i class="fa-solid fa-paperclip fa-xl"></i>
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.ScreenshotMonitor" DisableElevation="true"
                           Style=" margin-left: 2px">
            </MudIconButton>
            <MudIconButton DisableElevation="true"
                           Style=" margin-left: 2px">
                <i class="fa-regular fa-calendar-plus fa-xl"></i>
            </MudIconButton>
        </div>

        <MudDivider />

        @*
        Không được xóa id="message-input",
        nó dùng để phân biệt với các MudTextField khác để style
        *@
        <div id="message-input">
            <MudTextField Placeholder="Nhập tin nhắn" @bind-Value="_newMessage" Variant="Variant.Text" DisableUnderLine="true"></MudTextField>
            <button class="btn-send mx-4" type="submit">Gửi</button>
        </div>
    </div>

</div>

@code {

    /* Code của Lâm */
    [Parameter]
    public EventCallback BackToConversationList { get; set; }


    /* Code của Cường */
    private User currentUser = Constant.currentUser;

    [Parameter]
    public Conversation? SelectedConversation { get; set; } = new Conversation();


    [Parameter]
    public string? Id {get; set;}

    [Parameter]
    public EventCallback OnIncomingMessageRecieved { get; set; }

    [Parameter]
    public MessageDTO? NewIncomingMessage { get; set; }

    private List<MessageDTO> _messages = new List<MessageDTO>();

    private string _testString = "";

    private string _newMessage = "";
    private string? _errorMessage = "";
    private string? _infoMessage;
    private string previousSelectedUserId = "";
    private bool _scrollToBottom = false;
    private bool _loadingMessages = false;
    private bool _loadingConversation = false;

    protected override async Task OnInitializedAsync()
    {
        //await JSRuntime.InvokeAsync<string>("console.log", "init detail", "true");

        if(SelectedConversation is null) await GetSelectedConversation();
    }
    protected override async Task OnParametersSetAsync()
    {
        // await JSRuntime.InvokeAsync<string>("console.log", "parameter change detatil - conversation", SelectedConversation);
        // await JSRuntime.InvokeAsync<string>("console.log", "parameter change detal - id", Id);
        // await JSRuntime.InvokeAsync<string>("console.log", "parameter change detail - mess", NewIncomingMessage);


        if (SelectedConversation is null)
        {
            await GetSelectedConversation();
            //await JSRuntime.InvokeAsync<string>("console.log", "get conversation when null", SelectedConversation);
        }
        if (NewIncomingMessage is not null)
        {
            //_messages.Add(NewIncomingMessage);
            await OnIncomingMessageRecieved.InvokeAsync();
            _scrollToBottom = true;
        }
        if (SelectedConversation is not null && SelectedConversation.conversationId != previousSelectedUserId)
        {
            previousSelectedUserId = SelectedConversation.conversationId;
            await GetConversationMessages();
            //await JSRuntime.InvokeAsync<string>("console.log", "get conversation when not null", SelectedConversation);
            _scrollToBottom = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await JSRuntime.InvokeAsync<string>("console.log", "after render detail", Id);
        if (SelectedConversation is null) await GetSelectedConversation();
        if (_scrollToBottom)
        {
            _scrollToBottom = false;
            //await JsRuntime.InvokeVoidAsync("window.scrollToLastMessage");
        }
    }

    //Get SelectedConversation
    private async Task<bool> GetSelectedConversation()
    {
        if (Id == null) return await Task.FromResult(false);
        else
        {
            bool success;
            string erroMessage;
            try
            {
                _loadingConversation = true;
                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("GET");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation/" + Id);
                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var respond = JsonConvert.DeserializeObject<ApiResponse<Conversation>>(responseContent);
                    success = true;
                    try
                    {
                        if (respond.Data != null)
                        {

                            SelectedConversation = respond.Data;
                            //await JSRuntime.InvokeAsync<string>("console.log", "get conver detail", SelectedConversation);
                            _testString = respond.Data.conversationId;
                            _infoMessage = null;
                        }
                        else
                        {
                            _infoMessage = $"Không có cuộc trò chuyện nào giữa bạn và {SelectedConversation.conversationName}";
                        }
                    }
                    catch (Exception e)
                    {
                        erroMessage = e.Message;
                    }

                }
            }
            catch (Exception ex)
            {
                success = false;
                erroMessage = ex.Message;
            }
            finally
            {
                _loadingConversation = false;
            }
            return await Task.FromResult(true);
        }
    }

    //Get Conversation
    private async Task<bool> GetConversationMessages()
    {
        if (SelectedConversation == null) return await Task.FromResult(false);
        else
        {
            bool success;
            string erroMessage;
            try
            {
                _loadingMessages = true;
                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("GET");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation/" + SelectedConversation.conversationType+"/" + SelectedConversation.conversationId+ "/Messages");
                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var respond = JsonConvert.DeserializeObject<ApiResponse<List<MessageDTO>>>(responseContent);
                    success = true;
                    try
                    {
                        if (respond.Data != null)
                        {
                            _messages = respond.Data;
                            _infoMessage = null;
                        }
                        else
                        {
                            _infoMessage = $"Không có cuộc trò chuyện nào giữa bạn và {SelectedConversation.conversationName}";
                        }
                    }
                    catch (Exception e)
                    {
                        erroMessage = e.Message;
                    }

                }
            }
            catch (Exception ex)
            {
                success = false;
                erroMessage = ex.Message;
            }
            finally
            {
                _loadingMessages = false;
            }
            return await Task.FromResult(true);
        }

    }

    // Get nguoi dung
    private async Task<bool> GetUser()
    {
        bool success;
        string erroMessage;
        try
        {
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("GET");
            httpRequestMessage.RequestUri = new Uri( Constant.uriHost + "User/{SelectedUser.conversationId}");
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<User>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                       // SelectedUser = respond.Data;
                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }

            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        return await Task.FromResult(true);
    }


    private async Task HandleSendMessageSubmit()
    {
        if (!string.IsNullOrWhiteSpace(_newMessage))
        {
            //var sendMessageDto = new Message(Guid.NewGuid().ToString(), "1", SelectedUser!.UserName, DateTime.Now, "Text", _newMessage);


            //var response = await GetClient().PostAsJsonAsync("api/messages", sendMessageDto, JsonConverter.JsonSerializerOptions);

            // ADD Message
            /*
            if (response.IsSuccessStatusCode)
            {
                var messageDto = new MessageDto(SelectedUser!.Id, AuthenticationState.User.Id, _newMessage, DateTime.Now);
                _messages.Add(messageDto);
                _scrollToBottom = true;
                _newMessage = "";
                _errorMessage = null;
                _infoMessage = null;
            }
           else
            {
                _errorMessage = "Error sending message";
            }
            */
        }
    }
}
