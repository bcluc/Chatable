@using Chatable.DI;
@using Chatable.Data.Components;
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.DTO;
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles.Respond;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject Blazored.LocalStorage.ILocalStorageService _localStorageService
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IHttpClientFactory ClientFactory

<link rel="stylesheet" href="/css/AddGroupDialog.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">


<div>

<div class="top_bar">
    @* <MudTextField T="Conversation" @bind-Value="selectedConversation" Placeholder="Tìm kiếm" Variant="Variant.Outlined" Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Search">
</MudTextField> *@

    @* <MudAutocomplete Placeholder="Tìm kiếm" T="Conversation" @bind-Value="selectedConversation" SearchFunc="@Search"
                     Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" ShowProgressIndicator="true"
                     ToStringFunc="@(e=> e==null?null : $"{e.conversationName}")" @onclick="() => OnClickSearchField()">
        <ProgressIndicatorTemplate>
            <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Primary" />
        </ProgressIndicatorTemplate>
                    
        <ItemTemplate>
            <div class="list-group-item">
                <div class="d-flex align-items-center" style="margin-left:0px; border-radius:15px">
                    <MudAvatar>
                        <MudImage Src=@((context.conversationType == "Peer" ? Constant.uriBaseUserAvt : Constant.uriBaseGroupAvt) + context.conversationAvatar)></MudImage>
                    </MudAvatar>
                    <h4 class="user-name">@context.conversationName</h4>
                </div>
            </div>
        </ItemTemplate>

         @oninput="HandleInputChange" 
    </MudAutocomplete> *@

        <input type="text" id="search-input" placeholder="Tìm kiếm" @bind-value="searchText" @bind-value:event="oninput"
        @onclick="() => OnClickSearchField()">
        

    @if(IsSearch)
    {
        <MudButton Variant="Variant.Filled" DisableElevation="true"
                       Style="padding: 8px; border-radius: 8px;transition: .3s;" 
                       Class="mx-2" OnClick="CloseSearchField">
                       Đóng</MudButton>
    }
    else
    {
    <MudIconButton Variant="Variant.Text" DisableElevation="true" 
    Style="padding: 9px; border-radius: 8px;" Class="mx-2" OnClick="OpenAddFriendDialog">
        <i class="fa-solid fa-user-plus fa-lg"></i>
    </MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.GroupAdd" OnClick="OpenAddGroupDialog" Variant="Variant.Text" DisableElevation="true"
        Style="padding: 7px; border-radius: 8px;">
    </MudIconButton>
    }
</div>
@if(IsSearch)
    {
        @if (_loading)
        {
            <div class="d-flex justify-center align-center" style="height: 100%">
                <MudProgressCircular Color="Color.Info" Indeterminate="true" />
            </div>
        }
        else
        {
        <div class="list-conversations-search">
        @foreach (var item in itemList)
        {
                    if (item.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) && item.isConversation)
            {
     
                            string avatarUrl = (item.TypeConversation == "Peer" ? Constant.uriBaseUserAvt : Constant.uriBaseGroupAvt) + item.Avatar;
                            <div class="coversation-container-search"
                                @onclick="() => OnConversationSelected(item)">
                                <img class="coversation-img mr-3" src="@avatarUrl" />
                            <div class="coversation-name" style="flex: 1">
                                    <div>
                                        <p >@item.Name</p>
                                    </div>
                                </div>
                            </div>
            }
                    else if (item.Id.Equals(searchText) && !item.isConversation)
                    {
                       
                            string avatarUrl = Constant.uriBaseUserAvt + item.Avatar;
                            <div class="coversation-container-search"
                            @onclick="() => OnUserSelected(item)">
                                <img class="coversation-img mr-3" src="@avatarUrl" />
                                <div class="d-flex justify-start flex-column" style="flex: 1">
                                <div class="d-flex coversation-last-message">

                                    <p class="last-msg" style="color: gray">@item.Id</p>
                                </div>
                                    <div class="d-flex mb-1">
                                    
                                        <p class="coversation-name">@item.Name</p>
                                    </div>
                                
                                </div>
                            </div>
                        
                    }
        }
        </div>
        }
    }
</div>

@code{
    public class SearchRequest
    {
        public string Keyword { get; set; }
    }
}

@inject CurrentUser CurrentUser

@code {
    [Parameter]
    public bool IsSearch { get; set; }
    [Parameter]
    public EventCallback<bool> IsSearchChanged { get; set; }


    private string searchText="";
    private bool _loading= false;
    private Conversation selectedConversation;

    private List<Conversation> conversationList = new List<Conversation>();
    private List<User> userList = new List<User>();
    private List<SearchDTO> itemList = new List<SearchDTO>();

    protected override async Task OnInitializedAsync()
    {
        //await GetAllFakeConversation();
        itemList.Clear();
        await GetAllConversations();
        await GetAllOtherUser();
        GetList();
    }

    //Search của Như
    private async void HandleInputChange()
    {
        // Update the input value
        await GetInputConversations();
    }
    private async Task OnClickSearchField()
    {
        IsSearch = true;
        await UpdateIsSearch();

    }
    private async Task CloseSearchField()
    {
        IsSearch = false;
        await UpdateIsSearch();
    }
    private async Task UpdateIsSearch()
    {
        await IsSearchChanged.InvokeAsync(IsSearch);
    }
    private async Task<bool> GetAllFakeConversation()
    {
        conversationList = new List<Conversation>
        {
            new Conversation("test","Peer",null,"name test", Constant.defaultImgMale, true),
            new Conversation("2UHY3794","Peer",null,"name test 2", Constant.defaultImgMale, true),
            new Conversation("2UHY3794","Group",null,"naem 123", Constant.defaultImgMale, false)
        };
        return await Task.FromResult(true);
    }

    private async Task<bool> GetInputConversations()
    {
        SearchRequest searchRequest = new SearchRequest();
        searchRequest.Keyword = searchText;
        bool success;
        _loading = true;
        string erroMessage;
        try
        {
            string requestInitialize = JsonConvert.SerializeObject(searchRequest);

            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("POST");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation/Search");
            httpRequestMessage.Content = new StringContent(requestInitialize);
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
            httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

            var response = await _http.SendAsync(httpRequestMessage);


            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<List<Conversation>>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                        conversationList = respond.Data;
                        _loading = false;
                        base.OnAfterRender(false);

                        await JSRuntime.InvokeAsync<string>("console.log", "key search", searchText);
                        await JSRuntime.InvokeAsync<string>("console.log", "search res", respond.Data);
                        await JSRuntime.InvokeAsync<string>("console.log", "search list", conversationList);

                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }
            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        return await Task.FromResult(true);
    }
    // Task get conversation
    private async Task<bool> GetAllConversations()
    {
        bool success;
        string erroMessage;
        _loading = true;
        try
        {
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("GET");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation");
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<List<Conversation>>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                        conversationList = respond.Data;
                        _loading = false;
                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }
            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        return await Task.FromResult(true);
    }

    private async Task<bool> GetAllOtherUser()
    {
        _loading = true;
        bool success;
        string erroMessage;
        try
        {
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("GET");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User");
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<List<User>>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                        userList = respond.Data;
                        _loading = false;
                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }
            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        return await Task.FromResult(true);
    }

    private void GetList()
    {
        _loading = true;
        foreach(var user in userList )
        {
            var userSearch = new SearchDTO
                {
                    Id = user.userName,
                    Name = user.fullName,
                    isConversation = false,
                    TypeConversation = "Peer",
                    Avatar = user.avatarUrl,
                };
            itemList.Add(userSearch);
        }
        foreach(var conversation in conversationList)
        {
            var conversationSearch = new SearchDTO
                {
                    Id = conversation.conversationId,
                    Name = conversation.conversationName,
                    isConversation = true,
                    TypeConversation = conversation.conversationType,
                    Avatar = conversation.conversationAvatar,
                };
            itemList.Add(conversationSearch);
        }
        _loading = false;
    }

    private void OpenAddGroupDialog()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true};
        DialogService.Show<Dialog.Add.AddGroup>("Tạo nhóm", options);
    }

    private async Task OnConversationSelected(SearchDTO conversation)
    {
        /* Code của BC*/
        _navigationManager.NavigateTo($"/chat/{conversation.TypeConversation}/{conversation.Id}");
    }

    private async Task OnUserSelected(SearchDTO user)
    {
        User selectedUser = await GetUserById(user.Id);
        OpenOtherProfileDialog(selectedUser);
    }

    private void OpenAddFriendDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        DialogService.Show<Dialog.Add.AddFriend>("Thêm bạn", options);
    }

    private async Task<User> GetUserById(string userName)
    {
        bool success;
        string erroMessage;
        try
        {
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("GET");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User/" + userName);
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<User>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                        return respond.Data;
                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }

            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        return null; 
    }
    private void OpenOtherProfileDialog(User user)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var parameter = new DialogParameters { { "user", user } };
        DialogService.Show<Dialog.Profile.DialogOtherProfile>("Thông tin tài khoản", parameter, options);
    }

}

