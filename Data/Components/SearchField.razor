@using Chatable.Data.Components;
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.DTO;
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles.Respond;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject Blazored.LocalStorage.ILocalStorageService _localStorageService
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IHttpClientFactory ClientFactory

<link rel="stylesheet" href="/css/AddGroupDialog.css">

<div class="top_bar">
    <MudAutocomplete Placeholder="Tìm kiếm" T="ConversationDTO" @bind-Value="selectedConversation" SearchFunc="@Search"
                     Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" 
                     ToStringFunc="@(e=> e==null?null : $"{e.Name}")">
        <ItemTemplate>
            <div class="list-group-item">
                <div class="d-flex align-items-center" style="margin-left:0px; border-radius:15px">
                    <MudAvatar>
                        <MudImage Src=@context.Avt></MudImage>
                    </MudAvatar>
                    <h4 class="user-name">@context.Name</h4>
                </div>
            </div>
            
        </ItemTemplate>
    </MudAutocomplete>

    <MudIconButton Variant="Variant.Text" DisableElevation="true" 
    Style="padding: 9px; border-radius: 8px;" Class="mx-2">
        <i class="fa-solid fa-user-plus fa-lg"></i>
    </MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.GroupAdd" OnClick="OpenAddGroupDialog" Variant="Variant.Text" DisableElevation="true"
        Style="padding: 7px; border-radius: 8px;">
    </MudIconButton>

</div>
@code {
    private string searchText;
    private ConversationDTO selectedConversation;
    private List<ConversationDTO> items = new List<ConversationDTO>();
    protected override async Task OnInitializedAsync()
    {
        await GetAllFakeConversation();
    }
    private async Task<IEnumerable<ConversationDTO>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrWhiteSpace(value))
            return Enumerable.Empty<ConversationDTO>();
        // return chat room
        return items.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));//.Select(x => x.Name);
    }
    private async Task<bool> GetAllFakeConversation()
    {
        items = new List<ConversationDTO>
        {
            new ConversationDTO("test", Constant.defaultImgMale, "test"),
            new ConversationDTO("2UHY3794", Constant.defaultImgMale, "2UHY3794"),
            new ConversationDTO("2UHY3794", Constant.defaultImgMale, "2UHY3794")
        };
        return await Task.FromResult(true);
    }
    private async Task<bool> GetAllConversations()
    {
        bool success;
        string erroMessage;
        try
        {
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("GET");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation");
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<List<ConversationDTO>>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                        items = respond.Data;
                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }
            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        return await Task.FromResult(true);
    }

    private string GetItemText(ConversationDTO item)
    {
        return item?.Name ?? string.Empty; 
    }

    private void OpenAddGroupDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        DialogService.Show<Dialog.AddGroup>("Tạo nhóm", options);
    }
}
