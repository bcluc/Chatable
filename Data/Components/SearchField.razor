@using Chatable.Data.Components;
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles.Respond;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject Blazored.LocalStorage.ILocalStorageService _localStorageService
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IHttpClientFactory ClientFactory

@*<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" />
*@
<link rel="stylesheet" href="/css/ChatLayout.css">

<div class="home-container3">
    <MudItem Style="width:100px">
        <MudAutocomplete T="string" Label="Tìm kiếm" @bind-Value="value2" SearchFunc="@Search2"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    </MudItem>
    <MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt" Color="Color.Tertiary" aria-label="add person" Class="home-button"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.GroupAdd" Color="Color.Tertiary" aria-label="add group" OnClick="OpenAddGroupDialog"></MudIconButton>

</div>
@code {
    private string value2;
    private IList<String> states = Constant.states;
    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        // return chat room
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void OpenAddGroupDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        DialogService.Show<Dialog.AddGroup>("Tạo nhóm", options);
    }
}
