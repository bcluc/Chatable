@using Chatable.DI
@using Chatable.Data.Components.List
@using Chatable.Data.Entitles.DTO;
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.Respond;
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http;
@using Newtonsoft.Json;
@using System.Net.Http.Headers;

@inject HttpClient Client
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="/css/ContactDetail.css">

@if(Id == null){
    <div class="waitChat-container">
        <div class="home-text3">
            <h2>Hiển thị danh sách bạn bè và nhóm của bạn</h2>
        </div>
        <img src="@Constant.imgWaitChat"
             alt="image"
             class="home-image" />
    </div>
}
else
{
    <div class="contact-container">

        <div class="header">
            <MudIconButton id="back-btn" Class="mr-3" OnClick="BackToLeft">
                <i class="fa-solid fa-chevron-left fa-lg"></i>
            </MudIconButton>
            <MudIcon Icon=@_titleIcon Disabled="true" aria-label="@_titleIcon" Style="margin:5px" />
            <h4 class="contact-p">@Id</h4>
        </div>

        <MudDivider />

        <div class="contact-list">
@if(_loadingList)
        {
            <div>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Loading list...
            </div>
        }
        else
        {
            @if(Id == "friendList")
            {
                <UserList Loading="@_loadingList" Chats="@_friendList" OnUserSelected="OnUserSelected" />
            }
            else if (Id == "groupList")
            {
                <GroupList Loading="@_loadingList" Groups="@_groupList" OnGroupSelected="OnGroupSelected"/>
            }
            else if(Id == "friendRequestList")
            {
                <FriendRequestList Loading="@_loadingList" RequestList="@_requestList" OnFriendRequestSelected="OnRequestSelected" />
            }
        }        </div>
    </div>
}


@inject CurrentUser CurrentUser

@code{

    /* Code của Lâm */
    [Parameter]
    public EventCallback BackToLeft { get; set; }

    /* Code của Cường */
    [Parameter]
    public String? Id{ get; set; }
    //Chia ra cac TH cua danh bạ dựa vào Id

    private string _titleText = "";
    private string _titleIcon = "";
    private bool _loadingList = false;


    private bool _loadingUsers = false;
    public IList<User> userList = Constant.usersList;
    private List<UserDTO> _friendList = new List<UserDTO>();
    private List<Group> _groupList = new List<Group>();
    public IList<FriendRequestDTO> _requestList = new List<FriendRequestDTO>();


    protected override async Task OnParametersSetAsync()
    {
        if (Id == "friendList")
        {
            _titleText = "Danh sách bạn bè";
            _titleIcon = @Icons.Material.Filled.Group;
            await GetFriendList();

        }
        else if (Id == "groupList")
        {
            _titleText = "Danh sách nhóm";
            _titleIcon = @Icons.Material.Filled.Groups;
            await GetGroupList();

        }
        else if (Id == "friendRequestList")
        {
            _titleText = "Danh sách lời mời kết bạn";
            _titleIcon = @Icons.Material.Filled.Email;
            await GetFriendReqList();
        }
    }
    private async Task OnUserSelected(UserDTO user)
    {
        if (user is null)
        {
            throw new ArgumentNullException(nameof(user));
        }
        _navigationManager.NavigateTo("/chat/" + user.UserName);
    }
    private async Task OnGroupSelected(Group group)
    {
        if (group is null)
        {
            throw new ArgumentNullException(nameof(group));
        }
        _navigationManager.NavigateTo("/chat/" + group.GroupId);
    }
    private async Task OnRequestSelected(FriendRequestDTO request)
    {
        if (request is null)
        {
            throw new ArgumentNullException(nameof(request));
        }
       // _navigationManager.NavigateTo("/chat/" + request.senderId);
    }

    // get friend list
    private async Task<bool> GetFriendList()
    {
        bool success;
        string erroMessage;
        try
        {
            _loadingList = true;
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("GET");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Friend");
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<List<UserDTO>>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                        _friendList = respond.Data;

                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }

            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        finally
        {
            _loadingList = false;
        }
        return await Task.FromResult(true);
    }
    // get group list
    private async Task<bool> GetGroupList()
    {
        bool success;
        string erroMessage;
        try
        {
            _loadingList = true;
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("GET");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Group");
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<List<Group>>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                        _groupList = respond.Data;
                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }

            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        finally
        {
            _loadingList = false;
        }
        return await Task.FromResult(true);
    }
    // get friendReq list
    private async Task<bool> GetFriendReqList()
    {
        bool success;
        string erroMessage;
        try
        {
            _loadingList = true;
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("GET");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Request/Received");
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var respond = JsonConvert.DeserializeObject<ApiResponse<List<FriendRequestDTO>>>(responseContent);
                success = true;
                try
                {
                    if (respond.Data != null)
                    {
                        _requestList = respond.Data;
                    }
                }
                catch (Exception e)
                {
                    erroMessage = e.Message;
                }

            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        finally
        {
            _loadingList = false;
        }
        return await Task.FromResult(true);
    }


}