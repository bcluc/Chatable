@using Chatable.DI
@using Chatable.Data.Entitles;
@using Chatable.Data.Entitles.DTO
@using Chatable.Data.Entitles.Model;
@using System.Net.Http.Headers;
@using Chatable.Data.Entitles.Respond;
@using Newtonsoft.Json;

@inject HttpClient _http

<link rel="stylesheet" href="/css/ChatList.css">
<div class="list-group list-group-flush">

    @if (Loading)
    {
        <li class="list-group-item">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Loading...
        </li>
    }
    else
    {
        <h3 style="margin: 20px; font-weight:500">Lời mời đã nhận (@_countReceived)</h3>
        @foreach (var request in RequestList)
        {
            @if(request.status.Equals("pending"))
            {
                @(_countReceived++)
            <li class="list-group-item " @onclick="() => HandleUserClick(request)">
                <div class="friend-request-card">
                    <div class="profile-picture">
                        <img src=@(Constant.defaultImgFemale)>
                    </div>
                    <div class="user-details">
                        <h4>@request.senderId</h4>
                        <h4 style="font-weight:lighter; font-size: 10px">13 Mutual Friends</h4>
                    </div>
                    <div class="friend-request-actions">
                            <button class="button button-primary" @onclick="() => HandleAccept(request)">Chấp nhận</button>
                            <button class="button button-secondary" @onclick="() => HandleDecline(request)">Từ chối</button>
                    </div>
                </div>
            </li>
            }
        }
        <h3 style="margin: 20px; font-weight:500">Lời mời đã gửi (@_countSent)</h3>
        @foreach (var request in WaitList)
        {
            @if (request.status.Equals("pending"))
            {
                @(_countSent++)
                <li class="list-group-item " @onclick="() => HandleUserClick(request)">
                    <div class="friend-request-card">
                        <div class="profile-picture">
                            <img src=@(Constant.defaultImgFemale)>
                        </div>
                        <div class="user-details">
                            <h4>@request.senderId</h4>
                            <h4 style="font-weight:lighter; font-size: 10px">13 Mutual Friends</h4>
                        </div>
                        <div class="friend-request-actions">
                            <button class="button button-primary" @onclick="() => HandleCancel(request)">Hủy lời mời</button>
                        </div>
                    </div>
                </li>
            }
        }
    }
</div>

@inject CurrentUser CurrentUser

@code {
    [Parameter]
    public IEnumerable<FriendRequestDTO> RequestList { get; set; } = Enumerable.Empty<FriendRequestDTO>();

    [Parameter]
    public IEnumerable<FriendRequestDTO> WaitList { get; set; } = Enumerable.Empty<FriendRequestDTO>();


    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public EventCallback<FriendRequestDTO> OnFriendRequestSelected { get; set; }

    private int _countReceived = 0;
    private int _countSent = 0;

    private async Task AcceptRequest(string senderID)
    {
        HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
        httpRequestMessage.Method = new HttpMethod("GET");
        httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Request/Accept/" + senderID);
        httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

        var response = await _http.SendAsync(
            httpRequestMessage
        );
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var respond = JsonConvert.DeserializeObject<ApiResponse<object>>(responseContent);
            try
            {
                Console.WriteLine("Accepted friend request");
            }
            catch (Exception e)
            {
                Console.WriteLine("Something went wrong");
            }

        }
    }
    private async Task DeclineRequest(string senderID)
    {
        HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
        httpRequestMessage.Method = new HttpMethod("GET");
        httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Request/Decline/" + senderID);
        httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

        var response = await _http.SendAsync(
            httpRequestMessage
        );
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var respond = JsonConvert.DeserializeObject<ApiResponse<object>>(responseContent);
            try
            {
                Console.WriteLine("Declined friend request");
            }
            catch (Exception e)
            {
                Console.WriteLine("Something went wrong");
            }
        }
    }
    private async Task CancelRequest(string receiverID)
    {
        HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
        httpRequestMessage.Method = new HttpMethod("GET");
        httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Request/Remove/" + receiverID);
        httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

        var response = await _http.SendAsync(
            httpRequestMessage
        );
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var respond = JsonConvert.DeserializeObject<ApiResponse<object>>(responseContent);
            try
            {
                Console.WriteLine("Cancel friend request");
            }
            catch (Exception e)
            {
                Console.WriteLine("Something went wrong");
            }

        }
    }
    private async Task HandleCancel(FriendRequestDTO friendReq)
    {
        await CancelRequest(friendReq.receiverId);
    }
    private async Task HandleAccept(FriendRequestDTO friendReq)
    {
        await AcceptRequest(friendReq.senderId);
    }
    private async Task HandleDecline(FriendRequestDTO friendReq)
    {
        await DeclineRequest(friendReq.senderId);
    }
    private async Task HandleUserClick(FriendRequestDTO friendReq)
    {
        await OnFriendRequestSelected.InvokeAsync(friendReq);
    }
}