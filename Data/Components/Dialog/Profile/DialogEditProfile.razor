@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles;
@using System.Globalization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject IDialogService DialogService
@inject HttpClient _http

<MudDialog class="custom-dialog-content">
    <DialogContent>
            @if (currentUser == null)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <div class="content">
                        <div Class="photos">
                            <MudImage Src="@Constant.defaultBg" Alt="Ảnh nền" Height="150" Style="width: 100%; object-fit: cover;"></MudImage>
                            <MudAvatar Style="height:74px; width:74px; border: 2px solid #fff; position: absolute; left: 50%; transform: translateX(-50%); margin-top: 110px;">
                                <MudImage Src="@currentUser.avatar"></MudImage>
                            </MudAvatar>
                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                <ButtonTemplate>
                                    <MudIconButton HtmlTag="label"
                                                   Color="Color.Info"
                                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                                    Style="position: absolute; width: 15px; height:12px; left: 57%; margin-top: 160px;"
                                                   for="@context.Id">
                                    </MudIconButton>
                                </ButtonTemplate>
                            </MudFileUpload>

                           @*  <MudIconButton Icon="@Icons.Material.Filled.CameraAlt" Style="position: absolute; width: 15px; height:12px; left: 57%; margin-top: 160px;" /> *@
                            
                        </div>

                        <div class="infor">
                            <p style=" font-size: 18px; font-weight: 500;"> Thông tin cá nhân </p>
                            <div style="margin-top: 10px;"> 
                                <MudText Style="font-size: 16px">Tên hiển thi</MudText>
                                <MudTextField Required="true" RequiredError="Bạn cần điền tên hiển thị!"
                                      @bind-Value="@FullNameChanged" For="@(() => FullNameChanged)"
                                      TextChanged="CheckChange"
                                                  Variant="Variant.Outlined" Margin="Margin.Dense" 
                                                  Style="background-color: white; border-radius: 8px; border-width: 2px; border-color: #ECEDF0"
                                                  HelperText="Sử dụng tên thật để bạn bè dễ dàng nhận diện hơn"></MudTextField>
                                <MudDivider></MudDivider>
                            </div>

                            <div style="margin-top: 10px;">
                                 <MudText Style="font-size: 16px">Email</MudText>
                                    <MudTextField @bind-Value="@EmailChanged" For="@(() => EmailChanged)"
                                      TextChanged="CheckChange"
                                      Required="true" RequiredError ="Bạn cần điền Email!" 
                                              Variant="Variant.Outlined" Margin="Margin.Dense"
                                              Style="background-color: white; border-radius: 8px; border-width: 2px;border-color: #ECEDF0"></MudTextField>

                            </div>
                            <div style="margin-top: 10px">
                                <MudText Style="font-size: 16px">Giới tính</MudText>

                                <MudRadioGroup @bind-SelectedOption="IsMale"                                               
                                                Class="center-radio-group"
                                                Style="background-color: white!important; margin-top: 10px">

                                    <MudRadio Option="true"
                                                Color="Color.Primary" 
                                                Dense="true" Class="radio-custom"
                                                Style="margin-left: 60px">Nam</MudRadio>
                                    <MudRadio Option="false"
                                                Color="Color.Primary"
                                                Dense="true" 
                                                Class="radio-custom" 
                                                Style="margin-left: 60px">Nữ</MudRadio>
                                </MudRadioGroup>
                                @{
                                GenderChanged = (IsMale) ? "Nam" : "Nữ";

                                if (currentUser.gender != GenderChanged)
                                    {
                                        CanUpdate = true;
                                    }
                                }
                  
                            </div>
                            <div style="margin-top: 10px; background-color: white">
                                <MudText Style="font-size: 16px">Ngày sinh</MudText>

                                <MudDatePicker MaxDate="DateTime.Now"
                                               Variant="Variant.Outlined"
                                               Style="background-color: white; border-radius:8px; border-width: 2px; border-color: #ECEDF0 "
                                               @bind-Date="dobChanged" For="@(() => dobChanged)"
                                               DisableToolbar="true" DateFormat="dd.MM.yyyy"                                             
                                               Class="top0" />


                    </div>
                            <p class="erro mb-8">@erroMessage</p>
                            <MudDivider></MudDivider>
                        </div>
                    </div>
            }
    </DialogContent>
    <DialogActions >
        <div class="bottom-right-button">
            <MudButton Color="Color.Primary" OnClick="Cancel" Style="margin-right: 20px; background-color: #F5F5F5; color: black">
                Hủy
            </MudButton>
            <MudButton Color="Color.Primary" OnClick="SaveChange" Class="btn-save btn-save-hover btn-save-disable "
                       Disabled="@(!CanUpdate)" >
                <MudText Style="color: white"> Cập nhập</MudText>
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>
<style>
    .mud-dialog .mud-dialog-content
    {
        padding: 8px 0;
    }

    .dialog-edit-profile
    {
        height: 700px;
    }
    .custom-dialog-content {
        padding 0;
        margin: 0;
        align-content: center;
        height: 700px;
    }

    .nopadding {
        padding: 0;
    }
    .content {
        height: 500px;
        width: 450px;
        overflow-y: scroll;
    }
    .photos {
        position: relative;
        width: 100%;
        text-align: center;
    }
    .infor {
        margin-top: 20px;
        height: 300px;
        max-height: 300px; 
        padding: 10px 20px;
    }

    .bottom-right-button {
        position: fixed;
        bottom: 0;
        right: 0;
        margin-bottom: 10px;
        margin-right: 10px;
        display: flex;
        width: 100%;
        align-items: center;
        justify-content: end;

    }
    .btn-save {
        color: white;
        background-color: #3559E0;
    }
    .btn-save-hover:hover{
        background-color: #4876FF;
    }

    .btn-save-disable:disabled {
        background-color: #63B8FF;

    }
    .mud-input-control-input-container 
    {
        background-color: white !important;
    }

    .erro {
        display: flex;
        width: 100%;
        margin: 10px 0px;
        color: red;
        font-size: 14px;
    }
</style>


@code {
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public T Data { get; set; }
    }
    public class UserInfor
    {
        public string userName { get; set; }
        public string fullName { get; set; }
        public string email { get; set; }
        public string avatar { get; set; }
        public DateTime dob = DateTime.Now;
        public string gender { get; set; }
        public string password { get; set; }
        public DateTime? lastTimeOnl { get; set; }
        public DateTime? createdAt { get; set; }

    }
}

@code {
    UserInfor currentUser;
    bool CanUpdate = false;
    string erroMessage;

    //thong tin hien thi để check xem người dùng có thay đổi thông tin hay k => enable nút cập nhập
    private string FullNameChanged { get; set; }
    private string EmailChanged { get; set; }
    private string GenderChanged { get; set; }
    private DateTime? dobChanged = DateTime.Now;
    private bool IsMale;
    DateTime? dobCur = DateTime.Now; 
    protected override void OnInitialized()
    {
        LoadProfile();
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();


    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }

    // private void  OnGenderChanged(bool selectedgender)
    // {
    //     GenderChanged = (selectedgender) ? "Nam" : "Nữ";
    //     CanUpdate = (currentUser.gender != GenderChanged)? true: false;
    // }

    private async Task<bool> SaveChange()
    {
        //gán các giá trị đã thay đổi vô current user
        currentUser.fullName = FullNameChanged;
        currentUser.email = EmailChanged;
        currentUser.gender = GenderChanged;
        //currentUser.dob = (dobChanged != null) ? dobChanged : currentUser.dob;
        //call api save change
        if(currentUser.fullName != null )
        {
            try
            {

                currentUser.gender = (IsMale == true) ? "Nam" : "Nữ";
                string serializedUser = JsonConvert.SerializeObject(currentUser);
                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("PUT");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User");

                httpRequestMessage.Content = new StringContent(serializedUser);

                httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    // Show success message
                    await DialogService.ShowMessageBox("Bạn đã cập nhập thông tin thành công!", "Thành công");

                    // Close the dialog
                    MudDialog.Close(DialogResult.Ok(true));

                    DialogService.Show<DialogProfile>("Thông tin cá nhân");

                }
                else
                {
                    string resBody = await response.Content.ReadAsStringAsync();
                    dynamic result = JsonConvert.DeserializeObject(resBody);
                    erroMessage = result.Message.ToString();
                }
            }
            catch (Exception ex)
            {
                erroMessage = ex.Message;
            }
        }

        return await Task.FromResult(true);
        //MudDialog.CancelAll();
    }
    private async Task<UserInfor> GetCurUser()
    {
        UserInfor curUser = new UserInfor();
        try
        {
            var response = await _http.GetAsync(Constant.uriHost + "User/CurrentUser");

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                if (responseContent != null)
                {
                    ApiResponse<UserInfor> apiResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse<UserInfor>>(responseContent);
                    curUser = apiResponse.Data;
                    return curUser;
                }
                return null;

            }
            return null;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return null;
        }
    }

    private async Task LoadProfile()
    {
        currentUser = await GetCurUser();

        if (currentUser != null)
        {
            FullNameChanged = currentUser.fullName;
            EmailChanged = currentUser.email;
            dobChanged = currentUser.dob;
            GenderChanged = currentUser.gender;
            dobCur = currentUser.dob;
            if (currentUser.gender == "Nam")
            {
                IsMale = true;
            }
            else
            {
                IsMale = false;
            }

            StateHasChanged();
        }
    }

    private void CheckChange()
    {
        //nào như fix cái lỗi email thì xài cái cmt
        // if (FullNameChanged != null && EmailChanged != null)
        // {
        //     if (FullNameChanged != currentUser.fullName || EmailChanged != currentUser.email || GenderChanged != currentUser.gender)
        //     {
        //         CanUpdate = true;
        //     }
        // }
        if (FullNameChanged != currentUser.fullName ||
            EmailChanged != currentUser.email ||
            GenderChanged != currentUser.gender)
            {
                CanUpdate = true;
            }
    }
}
