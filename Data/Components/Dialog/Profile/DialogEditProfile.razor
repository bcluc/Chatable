@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles;
@using System.Globalization;
@using System.Net.Http;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

@inject IDialogService DialogService
@inject HttpClient _http

@* ai test nhớ điền mail vô nha *@
<MudDialog class="custom-dialog-content">
    <DialogContent>
            @if (currentUser == null)
            {
            <p>Loading</p>
            }
            else
            {
                <div class="content">
                        <div Class="photos">
                            <MudImage Src="@Constant.defaultBg" Alt="Ảnh nền" Height="150" Style="width: 100%; object-fit: cover;"></MudImage>
                            <MudAvatar Style="height:74px; width:74px; border: 2px solid #fff; position: absolute; left: 50%; transform: translateX(-50%); margin-top: 110px;">
                                <MudImage Src="@currentUser.avatarUrl"></MudImage>
                            </MudAvatar>
                            <MudFileUpload T="IFormFile" FilesChanged="UploadFiles">
                                <ButtonTemplate>
                                    <MudIconButton HtmlTag="label"
                                                   Color="Color.Info"
                                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                                   Style="position: absolute; width: 15px; height:12px; left: 55%; margin-top: 6px;"
                                                   for="@context.Id">
                                    </MudIconButton>
                                </ButtonTemplate>
                            </MudFileUpload>

                        
                            
                        </div>

                        <div class="infor">
                            <p style=" font-size: 18px; font-weight: 500;"> Thông tin cá nhân </p>
                            <div style="margin-top: 10px;"> 
                                <MudText Style="font-size: 16px">Tên hiển thi</MudText>
                                <MudTextField Required="true" RequiredError="Bạn cần điền tên hiển thị!"
                                      @bind-Value="@model.FullNameChanged" For="@(() => model.FullNameChanged)"
                                      TextChanged="CheckChange"
                                                  Variant="Variant.Outlined" Margin="Margin.Dense" 
                                                  Style="background-color: white; border-radius: 8px; border-width: 2px; border-color: #ECEDF0"
                                                  HelperText="Sử dụng tên thật để bạn bè dễ dàng nhận diện hơn"></MudTextField>
                                <MudDivider></MudDivider>
                            </div>

                            <div style="margin-top: 10px;">
                                 <MudText Style="font-size: 16px">Email</MudText>
                                <MudTextField @bind-Value="@model.EmailChanged" For="@(() => model.EmailChanged)"
                                      TextChanged="CheckChange"
                                      Required="true" RequiredError ="Bạn cần điền Email!" 
                                              Variant="Variant.Outlined" Margin="Margin.Dense"
                                              Style="background-color: white; border-radius: 8px; border-width: 2px;border-color: #ECEDF0"></MudTextField>

                            </div>
                            <div style="margin-top: 10px">
                                <MudText Style="font-size: 16px">Giới tính</MudText>

                            <MudRadioGroup T="string"
                                       SelectedOption="@model.GenderChanged"
                                       SelectedOptionChanged="OnGenderChanged"
                                       Class="center-radio-group"
                                       Style="background-color: white!important; margin-top: 10px">

                                    <MudRadio Option=@("Nam")
                                                Color="Color.Primary" 
                                                Dense="true" Class="radio-custom"
                                                Style="margin-left: 60px">Nam</MudRadio>
                                    <MudRadio Option=@("Nữ")
                                                Color="Color.Primary"
                                                Dense="true" 
                                                Class="radio-custom" 
                                                Style="margin-left: 60px">Nữ</MudRadio>
                                </MudRadioGroup>
                                
                  
                            </div>
                            <div style="margin-top: 10px; background-color: white">
                                <MudText Style="font-size: 16px">Ngày sinh</MudText>

                                <MudDatePicker MaxDate="DateTime.Now"
                                               Variant="Variant.Outlined"
                                               Style="background-color: white; border-radius:8px; border-width: 2px; border-color: #ECEDF0 "
                                       Date="@model.dobChanged"
                                               DateChanged="OnDobChanged"
                                       For="@(() => model.dobChanged)"
                                               DisableToolbar="true"
                                               DateFormat="dd.MM.yyyy"  
                                               Required="true"
                                               RequiredError="Hãy chọn ngày sinh của bạn"
                                               Class="top0" >
                                </MudDatePicker>
                        </div>
                            <p class="erro mb-8">@erroMessage</p>
                            <MudDivider></MudDivider>
                        </div>
                    </div>
            }
    </DialogContent>
    <DialogActions >
        <div class="bottom-right-button">
            <MudButton Color="Color.Primary" OnClick="Cancel" Style="margin-right: 20px; background-color: #F5F5F5; color: black">
                Hủy
            </MudButton>
            <MudButton Color="Color.Primary" OnClick="SaveChange" Class="btn-save btn-save-hover btn-save-disable "
                       Disabled="@(!CanUpdate)" >
                <MudText Style="color: white"> Cập nhập</MudText>
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>
<style>
    .mud-dialog .mud-dialog-content
    {
        padding: 8px 0;
    }

    .dialog-edit-profile
    {
        height: 700px;
    }
    .custom-dialog-content {
        padding 0;
        margin: 0;
        align-content: center;
        height: 700px;
    }

    .nopadding {
        padding: 0;
    }
    .content {
        height: 500px;
        width: 450px;
        overflow-y: scroll;
    }
    .photos {
        position: relative;
        width: 100%;
        text-align: center;
    }
    .infor {
        margin-top: 20px;
        height: 300px;
        max-height: 300px; 
        padding: 10px 20px;
    }

    .bottom-right-button {
        position: fixed;
        bottom: 0;
        right: 0;
        margin-bottom: 10px;
        margin-right: 10px;
        display: flex;
        width: 100%;
        align-items: center;
        justify-content: end;

    }
    .btn-save {
        color: white;
        background-color: #3559E0;
    }
    .btn-save-hover:hover{
        background-color: #4876FF;
    }

    .btn-save-disable:disabled {
        background-color: #63B8FF;

    }
    .mud-input-control-input-container 
    {
        background-color: white !important;
    }

    .erro {
        display: flex;
        width: 100%;
        margin: 10px 0px;
        color: red;
        font-size: 14px;
    }
</style>


@code {
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public T Data { get; set; }
    }
    public class UserInfor
    {
        public string userName { get; set; }
        public string fullName { get; set; }
        public string email { get; set; }
        public string avatarUrl { get; set; }
        public DateTime dob = DateTime.Now;
        public string gender { get; set; }
        public string password { get; set; }
        public DateTime? lastTimeOnl { get; set; }
        public DateTime? createdAt { get; set; }

    }
    public class UpdateUserForm
    {

        [Required(ErrorMessage = "Họ tên người dùng là bắt buộc.")]
        public string FullNameChanged { get; set; }

        [Required(ErrorMessage = "Email là bắt buộc.")]
        public string EmailChanged { get; set; }

        [Required(ErrorMessage = "Ngày sinh là bắt buộc.")]
        public DateTime? dobChanged = DateTime.Today;

        public string GenderChanged { get; set; } = "Nam";

       
    }
}

@code {

    User currentUser = Constant.currentUser;
    bool CanUpdate = false;
    string erroMessage;

    UpdateUserForm model = new UpdateUserForm();
   

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private async Task UploadFiles(IFormFile file)
    {
        try
        {
            if (file != null)
            {
                var content = new MultipartFormDataContent();
                content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);

                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("POST");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User/UploadAvatar");

                httpRequestMessage.Content = content;

                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    // Show success message
                    await DialogService.ShowMessageBox("Bạn đã cập nhập thông tin thành công!", "Thành công");

                   
                }
                else
                {
                    string resBody = await response.Content.ReadAsStringAsync();
                    dynamic result = JsonConvert.DeserializeObject(resBody);
                    erroMessage = result.Message.ToString();
                }
            }
            
        }
        catch (Exception ex)
        {
            erroMessage = ex.Message;
        }
    }

    void Cancel()
    {
        MudDialog.Close(DialogResult.Ok(true));
        DialogService.Show<DialogProfile>("Thông tin cá nhân");
    }

    private void  OnGenderChanged(string selectedgender)
    {
        model.GenderChanged = selectedgender;
        if (CanUpdate == false)
        {
            CanUpdate = (currentUser.gender != model.GenderChanged) ? true : false;
        }
    }
    private void OnDobChanged(DateTime? newDate)
    {
        model.dobChanged = newDate;
        if (CanUpdate == false)
        {
            if (currentUser.dob != model.dobChanged.GetValueOrDefault())
            {
                CanUpdate = true;
            }
        }
    }
    private void CheckChange()
    {
        if (!CanUpdate)
        {
            if (model.FullNameChanged != null && model.EmailChanged != null)
            {
                if (model.FullNameChanged != currentUser.fullName ||
                    model.EmailChanged != currentUser.email)
                {
                    CanUpdate = true;
                }
            }
        }
    }

    private async Task<bool> SaveChange()
    {
        //gán các giá trị đã thay đổi vô current user
        currentUser.fullName = model.FullNameChanged;
        currentUser.email = model.EmailChanged;
        currentUser.gender = model.GenderChanged;
        if (model.dobChanged.HasValue)
        {
            currentUser.dob = model.dobChanged.GetValueOrDefault();
        }

        //call api save change
        if(currentUser.fullName != null && currentUser.email != null )
        {
            try
            {
                currentUser.gender = model.GenderChanged;
                string serializedUser = JsonConvert.SerializeObject(currentUser);
                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("PUT");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User");

                httpRequestMessage.Content = new StringContent(serializedUser);

                httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    // Show success message
                    await DialogService.ShowMessageBox("Bạn đã cập nhập thông tin thành công!", "Thành công");

                    // Close the dialog
                    MudDialog.Close(DialogResult.Ok(true));

                    DialogService.Show<DialogProfile>("Thông tin cá nhân");

                }
                else
                {
                    string resBody = await response.Content.ReadAsStringAsync();
                    dynamic result = JsonConvert.DeserializeObject(resBody);
                    erroMessage = result.Message.ToString();
                }
            }
            catch (Exception ex)
            {
                erroMessage = ex.Message;
            }
        }

        return await Task.FromResult(true);
    }


    private async Task LoadProfile()
    {
        // currentUser = await GetCurUser();

        if (currentUser != null)
        {
            model.FullNameChanged = currentUser.fullName;
            model.EmailChanged = currentUser.email;
            model.dobChanged = currentUser.dob;
            model.GenderChanged = currentUser.gender;
           
            StateHasChanged();
        }
    }

}
