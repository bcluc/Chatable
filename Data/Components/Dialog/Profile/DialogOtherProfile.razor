@using Chatable.DI
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles;
@using System.Globalization;
@using System.Net.Http;
@using Chatable.Data.Entitles.Respond
@using Microsoft.AspNetCore.SignalR.Client;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers;

@inject IDialogService DialogService
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject IJSRuntime jsRuntime
@inject IDialogService Dialog



<link rel="stylesheet" href="/css/DialogProfile.css">

<MudDialog class="custom-dialog-content" Style="height: 580px" >
    <DialogContent>
        @if (currentUser == null)
        {
            <p>Loading</p>
        }
        else
        {
            <div class="content" style="height: 450px; max-height: 450px; overflow-y: unset">
                <div Class="photos">
                    <MudImage Src="@Constant.defaultBg" Alt="Ảnh nền" Height="150" Style="width: 100%; object-fit: cover;"></MudImage>
                    <MudAvatar Style="height:74px; width:74px; border: 2px solid #fff; position: absolute; left: 50%; transform: translateX(-50%); margin-top: 110px;">
                        <MudImage Src="@(Constant.uriBaseUserAvt + user.avatarUrl)"></MudImage>
                    </MudAvatar>

                    <MudText style=" position: absolute;  left: 50%; margin-top: 35px; transform: translateX(-50%); font-size: 17px; font-weight: 500;font-family: SVN-Poppins;">
                        @user.fullName</MudText>
                </div>
                
                <div class="infor" style="margin-top: 70px;">
                    <MudDivider Style="height:3px"></MudDivider>
                    <MudText style=" font-size: 18px; font-weight: 500;font-family: SVN-Poppins;"> 
                        Thông tin cá nhân </MudText>

                    <div class="horizental">
                        <MudText Style="width: 170px; margin-top: 20px; font-family: SVN-Poppins;">Email</MudText>
                        <MudText Style="margin-top: 20px; font-family: SVN-Poppins;">
                            @(user.email != null ? user.email : "Chưa cập nhập")</MudText>
                    </div>
                    <div class="horizental">
                        <MudText Style="width: 170px; margin-top: 20px; font-family: SVN-Poppins;">Giới tính</MudText>
                        <MudText Style="margin-top: 20px; font-family: SVN-Poppins;">@user.gender</MudText>
                    </div>
                    <div class="horizental">
                        <MudText Style="width: 170px; margin-top: 20px; font-family: SVN-Poppins;">Ngày sinh</MudText>
                        <MudText Style="margin-top: 20px; font-family: SVN-Poppins;">@(user.dob.HasValue ? user.dob.Value.ToString("dd / MM / yyyy") : "N/A")</MudText>
                    </div>
                </div>
            </div>
           
        }
    </DialogContent>
    <DialogActions >
        @if (user.isFriend)
        {
            <div class="toEdit">
                <MudButton OnClick="OpenChat" Class="btn-save" FullWidth="true">
                    Nhắn tin
                </MudButton>
            </div>
        }
        else
        {
        <div class="otherDialog">
                <MudButton OnClick="OpenChat" Class="btn-save" FullWidth="true">
                Nhắn tin
            </MudButton>
            @*Thêm điều kiện đã chấp nhận lời mời hay chưa*@                    
            <MudButton OnClick="SendFriendRequest" Class="btn-addfr" FullWidth="true" 
                    Style="margin-left:20px">
                Gửi lời mời kết bạn
            </MudButton>
                
        </div>
        }
    </DialogActions>
</MudDialog>

@inject CurrentUser CurrentUser
@inject MessageHubManager MessageHubManager

@code{
    public class FriendRequest
    {
        public string ReceiverId { get; set; }
    }
}
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    // Truyen vao nguoi dung
    [Parameter]
    public User user { get; set; }

    private bool success = false;
    User currentUser;
    String avatar;

    protected override void OnInitialized()
    {
        currentUser = CurrentUser.currentUser!;
    }

    private void OpenChat()
    {
        if (user is null)
        {
            throw new ArgumentNullException(nameof(user));
        }
        _navigationManager.NavigateTo("/chat/Peer/" + user.userName);
    }

    private async void SendFriendRequest()
    {
        FriendRequest request = new FriendRequest();
        request.ReceiverId = user.userName;
        await SendRequest(request);
        Console.WriteLine("send rq "+request);
        await MessageHubManager.HubConnection!.SendAsync("SendRequest", user.userName);
    }

    private void NotifyStateChanged() => StateHasChanged();

    private async Task SendRequest(FriendRequest friendRequest)
    {
        try
        {
            string requestInitialize = JsonConvert.SerializeObject(friendRequest);
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("POST");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Request");
            httpRequestMessage.Content = new StringContent(requestInitialize);
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

            httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                await DialogService.ShowMessageBox("Thông báo", "  Bạn đã gửi lời mời thành công!  ");

                // var user = JsonConvert.DeserializeObject<ApiResponse>(responseContent);

                success = true;
            }
            else
            {
                success = false;
                string resBody = await response.Content.ReadAsStringAsync();
                
            }
            Console.WriteLine(friendRequest.ReceiverId + " " + success);
            if (success)
            {
                _navigationManager.NavigateTo("/chat");
            }
        }
        catch (Exception ex)
        {
            success = false;
        }

        //await jsRuntime.InvokeAsync<string>("console.log", "error", erroMessage);
    }
    private async Task OpenErroDialog()
    {
        var dialog = DialogService.Show<ErroUpImage>("Thông báo");
        var result = await dialog.Result;
    }
}

   