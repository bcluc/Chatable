@using Chatable.DI
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles;
@using System.Globalization;
@using System.Net.Http;
@using Chatable.Data.Entitles.Respond
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers

@inject IDialogService DialogService
@inject HttpClient _http
@inject IJSRuntime jsRuntime
@inject IDialogService Dialog
@inject CurrentUser CurrentUser



<link rel="stylesheet" href="/css/DialogProfile.css">
<link rel="stylesheet" href="/css/AuthTemplate.css">


<MudDialog class="custom-dialog-content" Style="height: 605px" >
    <DialogContent>
        @if (currentUser == null)
        {
            <p>Loading</p>
        }
        else
        {
            <div class="content" style="height: 420px; overflow-y: unset">
                <div Class="photos">
                    <MudImage Src="@Constant.defaultBg" Alt="Ảnh nền" Height="150" Style="width: 100%; object-fit: cover;"></MudImage>
                    <MudAvatar Style="height:74px; width:74px; border: 2px solid #fff; position: absolute; left: 50%; transform: translateX(-50%); margin-top: 110px;">
                    @if(currentUser.avatarUrl!= null)
                    {
                            <MudImage Src="@(Constant.uriBaseUserAvt +currentUser.avatarUrl)"></MudImage>

                        }
                        else
                        {
                            <MudImage Src="@Constant.defaultImgMale"></MudImage>

                        }
                    </MudAvatar>
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                        <ButtonTemplate>
                            <MudIconButton HtmlTag="label"
                                           Color="Color.Info"
                                           Icon="@Icons.Material.Filled.PhotoCamera"
                                           Style="position: absolute; width: 15px; height:12px; left: 55%; margin-top: 6px;"
                                           for="@context.Id">
                            </MudIconButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    <MudText style=" position: absolute;  font-family: SVN-Poppins;left: 50%; margin-top: 35px; transform: translateX(-50%); font-size: 17px; font-weight: 500;">@currentUser.fullName</MudText>


                </div>

                <div class="infor" style="margin-top: 70px;">
                    <MudText style="font-family: SVN-Poppins; font-size: 18px; font-weight: 500;"> Thông tin cá nhân </MudText>

                    <div class="horizental">
                        <MudText Style="font-family: SVN-Poppins;width: 170px; margin-top: 20px; ">Email</MudText>
                        <MudText Style="font-family: SVN-Poppins;margin-top: 20px">@(currentUser.email != null ? currentUser.email : "Chưa cập nhập")</MudText>
                    </div>
                    <div class="horizental">
                            <MudText Style="font-family: SVN-Poppins;width: 170px; margin-top: 20px; ">Giới tính</MudText>
                            <MudText Style="font-family: SVN-Poppins;margin-top: 20px">@currentUser.gender</MudText>
                    </div>
                    <div class="horizental">
                            <MudText Style="font-family: SVN-Poppins;width: 170px; margin-top: 20px; ">Ngày sinh</MudText>
                            <MudText Style="font-family: SVN-Poppins;margin-top: 20px">@(currentUser.dob.HasValue ? currentUser.dob.Value.ToString("dd / MM / yyyy") : "N/A")</MudText>
                    </div>
                </div>
            </div>
        }
    </DialogContent>
    <DialogActions >
        <div class="toEdit" style="flex-direction: column">
            <MudButton StartIcon="@Icons.Material.Filled.Edit" OnClick="OpenEditDialog" Class="save-btn" FullWidth="true">
                Chỉnh sửa thông tin
            </MudButton>
            <MudButton OnClick="OpenChangePassDialog" Class="save-btn" style="margin-top: 10px;" FullWidth="true">
                Đổi mật khẩu
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>
<style>
    .save-btn {
        border-radius: 11px;
        color: white;
        background-color: var(--bg-color);
        font-size: 15px;
        font-weight: 500;
        font-family: SVN-Poppins;
        text-transform: none;
    }

        .save-btn:hover {
            background-color: var(--btn-hover);
        }
</style>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public EventCallback OnDialogClosed { get; set; }
    User currentUser;
    List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    String avatar;

    protected override void OnInitialized()
    {
        currentUser = CurrentUser.currentUser!;
    }

    private void OpenEditDialog()
    {
        MudDialog.Close(DialogResult.Ok(true));
        var options = new DialogOptions { DisableBackdropClick = true };
        var dialog = DialogService.Show<DialogEditProfile>("Chỉnh sửa thông tin cá nhân", options);
    }
    private void OpenChangePassDialog()
    {
        MudDialog.Close(DialogResult.Ok(true));
        DialogService.Show<DialogChangePass>("Thay đổi mật khẩu");
    }

    private async void UploadFile(IBrowserFile file)
    {
        try
        {
            using var fileStream = file.OpenReadStream();

            if (fileStream != null)
            {
                selectedFiles.Add(file);

                await UpAvatar(file);
            }
            else
            {
                await OpenErroDialog();
            }
        }
        catch (Exception ex)
        {
            // Xử lý các lỗi khác nếu có
            await OpenErroDialog();
        }

    }
    private async Task UpAvatar(IBrowserFile file)
    {
        try
        {
            using var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);

            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("POST");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User/UploadAvatar");
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

            httpRequestMessage.Content = content;

            var response = await _http.SendAsync(httpRequestMessage);

            // Kiểm tra xem yêu cầu có thành công không
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                if (responseContent != null)
                {
                    ApiResponse<String> apiResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse<String>>(responseContent);
                    avatar = apiResponse.Data;

                    currentUser.avatarUrl = avatar;
                    CurrentUser.currentUser = currentUser;
                    CurrentUser.currentUser.avatarUrl += "?t=" + DateTime.UtcNow;
                    StateHasChanged();
                }

            }
            else
            {
                // Xử lý lỗi nếu có
                Console.WriteLine($"Error uploading file. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Xử lý lỗi nếu có
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }


    }
    private void NotifyStateChanged() => StateHasChanged();

    private async Task OpenErroDialog()
    {
        var dialog = DialogService.Show<ErroUpImage>("Thông báo");
        var result = await dialog.Result;
    }
}

   