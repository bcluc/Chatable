@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles;
@using System.Globalization;
@using System.Net.Http;
@using Newtonsoft.Json;

@inject IDialogService DialogService
@inject HttpClient _http

<link rel="stylesheet" href="/css/AddGroupDialog.css">

<MudDialog class="custom-dialog-content" >
    <DialogContent>
        @if (currentUser == null)
        {
            <p>Loading</p>
        }
        else
        {
            <div class="app-component-container">
                <div Class="photos">
                    <MudImage Src="@Constant.defaultBg" Alt="Ảnh nền" Height="150" Style="width: 100%; object-fit: cover;"></MudImage>
                    <MudAvatar Style="height:74px; width:74px; border: 2px solid #fff; position: absolute; left: 50%; transform: translateX(-50%); margin-top: 110px;">
                        <MudImage Src="@currentUser.avatar"></MudImage>
                    </MudAvatar>
                    <MudFileUpload T="IFormFile" FilesChanged="UploadFiles">
                        <ButtonTemplate>
                            <MudIconButton HtmlTag="label"
                                           Color="Color.Info"
                                           Icon="@Icons.Material.Filled.PhotoCamera"
                                           Style="position: absolute; width: 15px; height:12px; left: 55%; margin-top: 6px;"
                                           for="@context.Id">
                            </MudIconButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    <MudText style=" position: absolute;  left: 50%; margin-top: 35px; transform: translateX(-50%); font-size: 17px; font-weight: 500;">@currentUser.fullName</MudText>


                </div>

                <div class="infor">
                    <p style=" font-size: 15px; font-weight: 500;"> Thông tin cá nhân </p>
                    <div class="email">
                        <MudText class="title">Email</MudText>
                        <MudText>@(currentUser.email != null ? currentUser.email : "Chưa cập nhập")</MudText>
                    </div>
                    <div class="sex">
                        <MudText class="title">Giới tính</MudText>
                        <MudText>@currentUser.gender</MudText>
                    </div>
                    <div class="dob">
                        <MudText class="title">Ngày sinh</MudText>
                            <MudText>@(currentUser.dob.HasValue ? currentUser.dob.Value.ToString("dd/MM/yyyy") : "N/A")</MudText>
                    </div>
                </div>
            </div>
        }
    </DialogContent>
    <DialogActions >
        <div class="toEdit">
            <MudButton StartIcon="@Icons.Material.Filled.Edit"  Color="Color.Primary" OnClick="OpenEditDialog" Style="width: 100%">
                Chỉnh sửa thông tin
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>
<style>
    .mud-dialog .mud-dialog-content {
        padding: 8px 0;
    }
    .custom-dialog-content {
        padding: 0;
        margin: 0;
        align-content: center;
    }
    .nopadding{
        padding: 0;
    }
    .photos
    {
        position: relative;
        width: 100%;
        text-align: center;
    }
    .infor {
        height: 100px;
        width: 100%;
        margin-top: 80px;
        padding-left: 60px;
    }
    .email {
        display: flex;
        width: 100%;
        align-items: center;
        margin-top: 10px;
    }

    .sex {
        display: flex;
        width: 100%;
        align-items: center;
        margin-top: 10px;
    }

    .dob {
        display: flex;
        width: 100%;
        align-items: center;
        margin-top: 10px;
    }

    .title {
        font-size: 16px;
        font-weight: 500;
        width: 40%; 

    }
    .toEdit {
        display: flex;
        width: 100%;
        margin-top: 30px;
        align-items: center;
        justify-content: center;
    }

</style>
@code{
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public T Data { get; set; }
    }
    public class UserInfor {
        public string userName { get; set; }
        public string fullName { get; set; }
        public string email { get; set; }
        public string avatar { get; set; }
        public DateTime? dob = DateTime.Now;
        public string gender { get; set; }
        // public string pass { get; set; }
        // public DateTime? lastTimeOnl { get; set; }
        // public DateTime? createdAt { get; set; }

    }
}
@code {

    UserInfor currentUser;
    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private async Task UploadFiles(IFormFile file)
    {
        try
        {
            if (file != null)
            {
                var content = new MultipartFormDataContent();
                content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);

                HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
                httpRequestMessage.Method = new HttpMethod("POST");
                httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "User/UploadAvatar");

                httpRequestMessage.Content = content;

                var response = await _http.SendAsync(httpRequestMessage);

                if (response.IsSuccessStatusCode)
                {
                    // Show success message
                    await DialogService.ShowMessageBox("Bạn đã cập nhập thông tin thành công!", "Thành công");


                }
                else
                {
                    string resBody = await response.Content.ReadAsStringAsync();
                    dynamic result = JsonConvert.DeserializeObject(resBody);
                }
            }

        }
        catch (Exception ex)
        {
        }
    }

    private void OpenEditDialog()
    {
        MudDialog.Close(DialogResult.Ok(true));
        //DialogEditProfile dialogEditProfile = new DialogEditProfile() { DisableBackdropClick = true };
        DialogService.Show<DialogEditProfile>("Chỉnh sửa thông tin cá nhân");
    }
    
    private async Task<UserInfor> GetCurUser ()
    {
        UserInfor curUser = new UserInfor();
        try
        {
            var response = await _http.GetAsync(Constant.uriHost+ "User/CurrentUser");

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                if (responseContent!=null)
                {
                    ApiResponse<UserInfor> apiResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse<UserInfor>>(responseContent);
                    curUser = apiResponse.Data;
                    return curUser;
                }
                return null;

            }
            return null;
        } 
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return null;
        }
    }

    private async Task LoadProfile()
    {
        currentUser = await GetCurUser();
        StateHasChanged();
    }
    
}