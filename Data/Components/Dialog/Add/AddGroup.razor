@using Chatable.DI
@using Chatable.Data.Components;
@using System.ComponentModel.DataAnnotations;
@using Chatable.Data.Components.List
@using Chatable.Data.Entitles.Model;
@using Chatable.Data.Entitles.Request;
@using Chatable.Data.Entitles.Respond;
@using Chatable.Data.Entitles;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Diagnostics;
@using System.Net.Http
@using Newtonsoft.Json
@using System.Net.Http.Headers;

@inject IJSRuntime jsRuntime
@inject IDialogService DialogService
@inject HttpClient _http
@inject NavigationManager _navigationManager

<link rel="stylesheet" href="/css/AddGroupDialog.css">

<MudDialog class="custom-dialog-content" >

    <DialogContent>
        <div>
            <div class="app-component-container">
                <div class="app-component-container1">
                    <div class="app-component-container3">
                        <img src="@Constant.defaultImgGroup" class="group-img" />
                        <input type="text"
                               style="background-image:none; padding-left: 8px; margin:auto; margin-left: 8px"
                            @bind="@_groupName"
                               @oninput="@((e) => { _groupName=(string)e.Value;})"
                               placeholder="Nhập tên nhóm"
                               class="app-component-textinput input"/>
                    </div>
                </div>
                <MudDivider Style="margin-top:10px; margin-bottom:10px"></MudDivider>
                <div class="app-component-container2" style="margin-top:10px">
                <MudItem>
                    <MudAutocomplete T="string" Placeholder="Tìm kiếm" @bind-Value="value2" SearchFunc="@Search2"
                                         AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.Start" Variant="Variant.Outlined" />
                </MudItem>
                
                     <UserList Loading="_loadingUsers" Chats="userList" OnUserSelected="OnUserSelected" />
                 </div>
                <div class="app-component-container4" >
                    <span class="app-component-text3">Đã chọn</span>
                    <span class="app-component-text4">@count /100</span>
                </div>

            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <div class="app-component-container5" style="height:auto; margin-bottom:10px">
            <button type="button" class="app-component-button1 button" @onclick="() => Close()" >Hủy</button>
            <button type="button" disabled="@isDisable" class="button @(count > 1 ? "app-component-button2-activate" :"app-component-button2" )" @onclick="() => CreateGroup(_selectedUsers)">
                Tạo nhóm
            </button>
        </div>
    </DialogActions>
</MudDialog>

@inject CurrentUser CurrentUser

@code {
    // test
    private User currentUser;
    public IList<User> userList = Constant.usersList;
    private IList<String> states = Constant.states;

    // variable
    bool success;
    private string value2;
    private string _groupName = "";
    private int count = 0;
    private bool isDisable = true;
    private bool _loadingUsers = false;
    private bool _processing = false;
    string erroMessage;

    private List<User> _selectedUsers = new List<User> ();


    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Close() => MudDialog.Close(DialogResult.Ok(true));


    // reset list khi mở dialog
    // có thể không cần khi lấy được list từ server
    protected override void OnInitialized()
    {
        currentUser = CurrentUser.currentUser!;

        //
        foreach(User user in userList)
        {
            user.IsSelected = false;
        }
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        // return chat room
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnUserSelected(User user)
    {
        if (user is null)
        {
            throw new ArgumentNullException(nameof(user));
        }

        var chatUser = userList.FirstOrDefault(c => c.userName == user.userName);

        if (chatUser is null)
        {
            user.IsSelected = true;
            userList.Add(user);
        }
        else
        {
            if (chatUser.IsSelected == true) 
            {
                chatUser.IsSelected = false;
                var itemToRemove = _selectedUsers.SingleOrDefault(r => r.userName == chatUser.userName);
                if (itemToRemove != null)
                    _selectedUsers.Remove(itemToRemove);
            }
            else {
                chatUser.IsSelected = true;
                _selectedUsers.Add(chatUser);
            }
        }
        count = _selectedUsers.Count;
        if (count > 1) isDisable = false;
        else isDisable = true;
    }

    private async Task<bool> CreateGroup(List<User> users)
    {
        var memberList = users.Select(l => l.userName).ToList();
        string res = "";
        if (_groupName == "")
        {
            _groupName = currentUser.fullName + "," + _selectedUsers[0].fullName + ", " + _selectedUsers[1].fullName;
        }
        //await jsRuntime.InvokeAsync<string>("console.log","This is group member", memberList.ToString());
        GroupRequest group = new GroupRequest(_groupName, memberList);

        // with the server
        try
        {
            string groupInitialize = JsonConvert.SerializeObject(group);
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("POST");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Group");
            httpRequestMessage.Content = new StringContent(groupInitialize);
            httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);

            httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                // var user = JsonConvert.DeserializeObject<ApiResponse>(responseContent);
                success = true;
            }
            else
            {
                success = false;
                string resBody = await response.Content.ReadAsStringAsync();
                dynamic result = JsonConvert.DeserializeObject(resBody);
                erroMessage = result.message;
            }
            _processing = false;

            if (success)
            {
                _navigationManager.NavigateTo("/chat");
            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
    
        //await jsRuntime.InvokeAsync<string>("console.log", "error", erroMessage);
        Close();
        return await Task.FromResult(true);
    }

    
}
