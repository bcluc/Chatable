@using Chatable.DI
@using Chatable.Data.Entitles
@using Chatable.Data.Entitles.DTO
@using Chatable.Data.Entitles.Model
<MudDialog Style="width: 350px; max-height: 80%; border-radius: 20px">

    <DialogContent>

        <div class="d-flex justify-center align-center mt-2">

            <MudText Style="font-size: 24px; font-weight: 400;">Chia sẻ</MudText>
            <MudSpacer/>
            <MudIconButton Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled" DisableElevation="true"
                           Size="Size.Large" OnClick="Cancel">
                       </MudIconButton>
        </div>

        <MudDivider Class="my-2"/>

        <div>
			@if (_loadingUsers)
			{
				<div class="coversation-container">
					<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
					Loading...
				</div>
			}
			else
			{
				<MudText Class="mb-2" Style="font-size: 16px; font-weight: 400;">
					Cuộc trò chuyện gần đây
				</MudText>
				@for (int i=0; i < Chats.Count; ++i )
				{
					var currentIndex = i;
					<div class="d-flex justify-center align-center mb-4">
						<img class="coversation-img mr-3" src="@((Chats[currentIndex].conversationType == "Peer" ? Constant.uriBaseUserAvt : Constant.uriBaseGroupAvt) + Chats[currentIndex].conversationAvatar)" />
						<p class="coversation-name">@Chats[currentIndex].conversationName</p>
						<MudSpacer/>
						<MudButton Variant="Variant.Filled" Style="background-color: #0091FE; color: white; border-radius: 8px"
								   Disabled="@sentList[currentIndex]"
								   OnClick="@(() => SendMessageTo(currentIndex))"
								   DisableElevation="true">Gửi</MudButton>
					</div>
				}
			}
        </div>

    </DialogContent>

</MudDialog>

@using Chatable.Data.Entitles.Respond
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json;
@using System.Net.Http.Headers

@inject HttpClient _http
@inject CurrentUser CurrentUser
@inject MessageHubManager MessageHubManager

@code {

	[CascadingParameter]
	MudDialogInstance? MudDialog { get; set; }

	[Parameter]
	public MessageDTO? Msg { get; set; }

	List<Conversation> Chats = new List<Conversation>();

	List<bool> sentList = new List<bool>();

	private bool _loadingUsers = false;

	protected override async Task OnInitializedAsync()
	{
		await GetAllConversations();
		for (int i = 0; i < Chats.Count; ++i)
		{
			sentList.Add(false);
		}
	}

	private async Task<bool> GetAllConversations()
	{
		string erroMessage;
		try
		{
			HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
			httpRequestMessage.Method = new HttpMethod("GET");
			httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation");
			httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
			var response = await _http.SendAsync(httpRequestMessage);

			if (response.IsSuccessStatusCode)
			{
				var responseContent = await response.Content.ReadAsStringAsync();
				var respond = JsonConvert.DeserializeObject<ApiResponse<List<Conversation>>>(responseContent);
				try
				{
					if (respond.Data != null)
					{
						Chats = respond.Data;
					}
				}
				catch (Exception e)
				{
					erroMessage = e.Message;
				}
			}
		}
		catch (Exception ex)
		{
			erroMessage = ex.Message;
		}
		return await Task.FromResult(true);
	}

	void SendMessageTo(int chatIndex)
	{
		string id = Chats[chatIndex].conversationId;
		string type = Chats[chatIndex].conversationType;
		Console.WriteLine("forward to " + id);

		if (type == "Peer")
		{
			MessageHubManager.HubConnection!.SendAsync("SendPeerMessage", id, Msg.MessageType, Msg.Content);
			sentList[chatIndex] = true;
		}
		else
		{
			MessageHubManager.HubConnection!.SendAsync("SendGroupMessage", id, Msg.MessageType, Msg.Content);
			sentList[chatIndex] = true;
		}
	}

    void Submit() => MudDialog!.Close(DialogResult.Ok("accept"));
    void Cancel() => MudDialog!.Close(DialogResult.Cancel);

}
