@using Chatable.DI
@using Chatable.Data.Entitles
@using Chatable.Data.Entitles.DTO
@using Chatable.Data.Entitles.Model

<style>
	.mud-dialog-content {
		padding: 0 !important
	}
</style>

<MudDialog Style="width: 360px; max-height: 80%; border-radius: 20px">

    <DialogContent>

		<div class="d-flex flex-column" style="padding: 8px 8px">
			<div class="d-flex justify-center align-center mt-2" style="padding: 0 16px 0 16px">

				<MudText Style="font-size: 24px; font-weight: 400;">Chia sẻ</MudText>
				<MudSpacer />
				<MudIconButton Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled" DisableElevation="true"
							   Size="Size.Large" OnClick="Cancel">
				</MudIconButton>
			</div>

			<MudDivider Class="my-2" />

			<div style="height: 400px; overflow: scroll; padding: 0 8px 0 16px">
				@if (_loadingUsers)
				{
					<div class="coversation-container">
						<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
						Loading...
					</div>
				}
				else
				{
					<MudText Class="mb-2" Style="font-size: 16px; font-weight: 400;">
						Cuộc trò chuyện gần đây
					</MudText>
					@for (int i = 0; i < Chats.Count; ++i)
					{
						var currentIndex = i;
						<div class="d-flex justify-center align-center mb-4">
							<img class="coversation-img mr-3" src="@((Chats[currentIndex].conversationType == "Peer" ? Constant.uriBaseUserAvt : Constant.uriBaseGroupAvt) + Chats[currentIndex].conversationAvatar)" />
							<p class="coversation-name">@Chats[currentIndex].conversationName</p>
							<MudSpacer />
							<MudButton Variant="Variant.Filled" Style="background-color: #0091FE; color: white; border-radius: 8px"
									   Disabled="@sentList[currentIndex]"
									   OnClick="@(() => SendMessageTo(currentIndex))"
									   DisableElevation="true">Gửi</MudButton>
						</div>
					}
				}
			</div>
		</div>
    </DialogContent>

</MudDialog>

@using Chatable.Data.Entitles.Respond
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json;
@using System.Net.Http.Headers

@inject HttpClient _http
@inject CurrentUser CurrentUser
@inject MessageHubManager MessageHubManager

@code {

	[CascadingParameter]
	MudDialogInstance? MudDialog { get; set; }

	[Parameter]
	public MessageDTO? Msg { get; set; }

	[Parameter]
	public EventCallback<Dictionary<String, Object>> UpdateUIChat { get; set; }

	List<Conversation> Chats = new List<Conversation>();

	List<bool> sentList = new List<bool>();

	private bool _loadingUsers = false;

	protected override async Task OnInitializedAsync()
	{
		await GetAllConversations();
		for (int i = 0; i < Chats.Count; ++i)
		{
			sentList.Add(false);
		}
	}

	private async Task<bool> GetAllConversations()
	{
		string erroMessage;
		try
		{
			HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
			httpRequestMessage.Method = new HttpMethod("GET");
			httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Conversation");
			httpRequestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.token!.accessToken);
			var response = await _http.SendAsync(httpRequestMessage);

			if (response.IsSuccessStatusCode)
			{
				var responseContent = await response.Content.ReadAsStringAsync();
				var respond = JsonConvert.DeserializeObject<ApiResponse<List<Conversation>>>(responseContent);
				try
				{
					if (respond.Data != null)
					{
						Chats = respond.Data;
					}
				}
				catch (Exception e)
				{
					erroMessage = e.Message;
				}
			}
		}
		catch (Exception ex)
		{
			erroMessage = ex.Message;
		}
		return await Task.FromResult(true);
	}

	async void SendMessageTo(int chatIndex)
	{
		string conversationId = Chats[chatIndex].conversationId;
		string type = Chats[chatIndex].conversationType;
		Console.WriteLine("forward to " + conversationId);

		if (type == "Peer")
		{
			await MessageHubManager.HubConnection!.SendAsync("SendPeerMessage", conversationId, Msg.MessageType, Msg.Content);
			sentList[chatIndex] = true;
		}
		else
		{
			await MessageHubManager.HubConnection!.SendAsync("SendGroupMessage", conversationId, Msg.MessageType, Msg.Content);
			sentList[chatIndex] = true;
		}

		await UpdateUIChat.InvokeAsync(new Dictionary<string, Object>
			{
				{"conversation_id", conversationId!},
				{
					"last_msg", new LastMessageDTO(
						CurrentUser.currentUser!.userName,
						 Msg.MessageType,
						Msg.Content,
						DateTime.UtcNow,
						null,
						true,
						0
					)
				},
			});
	}

    void Submit() => MudDialog!.Close(DialogResult.Ok("accept"));
    void Cancel() => MudDialog!.Close(DialogResult.Cancel);

}
