@using System.ComponentModel.DataAnnotations
@using Chatable.Data.Entitles
@using Newtonsoft.Json
@using System.Text
@using System.Net.Http.Json

@inject NavigationManager _navigationManager
@inject IDialogService DialogService
@inject HttpClient _http
@inject IJSRuntime jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService

<link rel="stylesheet" href="/css/DialogInsertEmail.css">

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-3 mb-n1" />
            Xác nhận
        </MudText>
    </TitleContent>
    <DialogContent >
        <div style="padding:0 8px; width: 100%">
            <MudTextField @bind-Value="model.email"
                          For="@(() => model.email)"
                          Variant="Variant.Outlined"
                          Class="mb-4"
                          TextChanged="checkMail" />
        </div>
    </DialogContent>
    <DialogActions>
       <div class="full-width">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Dark"
                       FullWidth="true"      
                       Disabled="@(!canExcute)"
                       OnClick="sendToEmail">
                @if (_processing)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="color: white"
                                         StrokeWidth="4" />
                }
                else
                {
                    <MudText>Đặt lại mật khẩu</MudText>
                }
                
            </MudButton>
            <MudButton OnClick="Cancel" Style="margin-top: 10px">Hủy</MudButton>
       </div>

    </DialogActions>
</MudDialog>
<style>
    .mud-dialog .mud-dialog-content {
        padding: 8px 0;
    }
</style>
@code {
    public class InsertPassForm
    {
        [Required(ErrorMessage = "Email là bắt buộc.")]
        public string email { get; set; }
    }
    public class EmailModel
    {
        public string email { get; set; }
    }
    public class ApiResponse
    {
        public bool success { get; set; }
        public string message { get; set; }
        public String data { get; set; }
    }
}

@code {
    InsertPassForm model = new InsertPassForm();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    Boolean canExcute = false;
    Boolean _processing = false;


    private void checkMail ()
    {
        if(model.email=="" || String.IsNullOrEmpty(model.email))
        {
            canExcute = false;
            return;
        }
        else
        {
            canExcute = true;
            return;
        }
    }

    private async Task sendToEmail ()
    {
        canExcute = false;
        _processing = true;
        try
        {

            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("POST");
            httpRequestMessage.RequestUri = new Uri(Constant.uriHost + "Auth/ForgotPassword?email="+ model.email);

            var response = await _http.SendAsync(httpRequestMessage);

            if (response.IsSuccessStatusCode)
            {
                canExcute = false;
                _processing = false;
                var responseContent = await response.Content.ReadAsStringAsync();;
                var responseData = JsonConvert.DeserializeObject<ApiResponse>(responseContent);
                if (responseData != null)
                {
                    string token = responseData.data;
                    await _localStorageService.SetItemAsync("token", token);
                }
                
            }
            else
            {
                string resBody = await response.Content.ReadAsStringAsync();
            }

            var parameters = new DialogParameters<DialogNotifyResetPass> { { x => x.userEmail, model.email } };

            var dialog = await DialogService.ShowAsync<DialogNotifyResetPass>("Thông báo", parameters);
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                _navigationManager.NavigateTo("/login");
            }
        } catch (Exception ex)
        {
            
        }       
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}