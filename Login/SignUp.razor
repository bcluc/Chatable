@layout LoginLayout
@page "/signup"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDialogService Dialog
<div class="title">
    @{
        <h1>Chatable</h1>
        <h2>Hãy tạo tài khoản của bạn</h2>
    }
</div>
<div Class="body">
    <EditForm Model="@model" OnValidSubmit="RegisterAccount">
        <DataAnnotationsValidator />
        <MudCard Style="width:350px" Class="container">
            <MudCardContent>
                <MudTextField T="string" Label="Tên người dùng" Required="true" RequiredError="Tên người dùng là bắt buộc"
                              @bind-Value="model.userName" For="@(() => model.userName)" />
                <MudTextField Label="Họ tên người dùng" Required="true" RequiredError="Họ tên người dùng là bắt buộc"
                              @bind-Value="model.fullName" For="@(() => model.fullName)" />

                <MudDatePicker Label="Ngày sinh" Required="true" RequiredError="Ngày sinh là bắt buộc"
                    @bind-Date="model.dob" DisableToolbar="true" DateFormat="dd.MM.yyyy" />

                <MudRadioGroup @bind-SelectedOption="isMale" Required="true" RequiredError="Giới tính là bắt buộc">
                    <MudRadio Option="true" Color="Color.Primary" Dense="true">Nam</MudRadio>
                    <MudRadio Option="false" Color="Color.Secondary" Dense="true">Nữ</MudRadio>
                </MudRadioGroup>
                <MudTextField Label="Mật khẩu" Class="mt-3" Required="true" RequiredError="Mật khẩu là bắt buộc"
                              @bind-Value="model.password" For="@(() => model.password)" InputType="InputType.Password" />
                <MudTextField Label="Nhập lại mật khẩu" Class="mt-3" Required="true" RequiredError="Hãy xác nhận lại mật khẩu"
                              @bind-Value="model.confirmPassword" For="@(() => model.confirmPassword)" InputType="InputType.Password" />
                <p class="erro">@erroMessage</p>
            </MudCardContent>
            <MudCardActions>
               @*  <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Đăng ký</MudButton> *@
                <MudButton ButtonType="ButtonType.Submit"  Disabled="@_processing" Variant="Variant.Filled" Color="Color.Primary">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Đang xử lý</MudText>
                    }
                    else
                    {
                        <MudText>Đăng ký</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
   
</div>

<style>
    .title {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px 0;
    }

    .body {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px 0;
    }

    .toSignUp {
        margin-left: 40px
    }

    .container {
        background: white;
    }
    .erro {
        display: flex;
        width: 100%;
        margin: 10px 0px;
        color: red;
        font-size: 14px;
    }
</style>
@code {
    RegisterAccountForm model = new RegisterAccountForm();
    private bool _processing = false;
    bool success;
    string erroMessage;
    Boolean isMale = true;
    DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
    public class RegisterAccountForm
    {
        [Required(ErrorMessage = "Tên người dùng là bắt buộc.")]
        public string userName { get; set; }

        [Required(ErrorMessage = "Họ tên người dùng là bắt buộc.")]
        public string fullName { get; set; }

        public string avatar = null;

        [Required(ErrorMessage = "Ngày sinh là bắt buộc.")]
        public DateTime? dob = DateTime.Today;

        public string gender { get; set; } = "Nam";

        [Required(ErrorMessage = "Mật khẩu là bắt buộc.")]
        [StringLength(30, ErrorMessage = "Mật khẩu phải có ít nhất 8 kí tự \nGồm số,chữ hoa và ký tự đặc biệt", MinimumLength = 8)]
        public string password { get; set; }

        [Required(ErrorMessage = "Nhập lại mật khẩu là bắt buộc.")]
        [Compare(nameof(password), ErrorMessage = "Mật khẩu và nhập lại mật khẩu không khớp.")]
        public string confirmPassword { get; set; }
    }

    private async Task<bool> RegisterAccount(EditContext context)
    {
        _processing = true; 
        if (!isMale)
        {
            model.gender = "Nữ";
        }
        try
        {

            string serializedUser = JsonConvert.SerializeObject(model);
            HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
            httpRequestMessage.Method = new HttpMethod("POST");
            httpRequestMessage.RequestUri = new Uri("https://localhost:7124/api/v1/Auth/register");
            httpRequestMessage.Content = new StringContent(serializedUser);

            httpRequestMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
            var response = await Http.SendAsync(httpRequestMessage);

            _processing = false;
            if (response.IsSuccessStatusCode)
            {
                success = true;

                OpenDialog();
            }
            else
            {
                success = false;
                string resBody = await response.Content.ReadAsStringAsync();
                dynamic result = JsonConvert.DeserializeObject(resBody);
                erroMessage = result.message;

            }
        }
        catch (Exception ex)
        {
            success = false;
            erroMessage = ex.Message;
        }
        return await Task.FromResult(true);

    }
    private void OpenDialog()
    {
        Dialog.Show<Dialog.SignUp.SignUpSuccess>("Thông báo");
    }
    public void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
        Console.WriteLine("Navigate to login");
    }
}